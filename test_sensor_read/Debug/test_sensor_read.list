
test_sensor_read.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c48  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08003de8  08003de8  00013de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e64  08003e64  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003e64  08003e64  00013e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e6c  08003e6c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e6c  08003e6c  00013e6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e70  08003e70  00013e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003e74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  20000070  08003ee4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000214  08003ee4  00020214  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b040  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b89  00000000  00000000  0002b0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000840  00000000  00000000  0002cc70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000798  00000000  00000000  0002d4b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000162b4  00000000  00000000  0002dc48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a5ad  00000000  00000000  00043efc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fc77  00000000  00000000  0004e4a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000de120  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000247c  00000000  00000000  000de174  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003dd0 	.word	0x08003dd0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08003dd0 	.word	0x08003dd0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <DWT_Delay_Init>:
uint16_t SUM; uint8_t Presence = 0;

#include "DHT.h"

uint32_t DWT_Delay_Init(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 800057c:	4b14      	ldr	r3, [pc, #80]	; (80005d0 <DWT_Delay_Init+0x58>)
 800057e:	68db      	ldr	r3, [r3, #12]
 8000580:	4a13      	ldr	r2, [pc, #76]	; (80005d0 <DWT_Delay_Init+0x58>)
 8000582:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000586:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000588:	4b11      	ldr	r3, [pc, #68]	; (80005d0 <DWT_Delay_Init+0x58>)
 800058a:	68db      	ldr	r3, [r3, #12]
 800058c:	4a10      	ldr	r2, [pc, #64]	; (80005d0 <DWT_Delay_Init+0x58>)
 800058e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000592:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000594:	4b0f      	ldr	r3, [pc, #60]	; (80005d4 <DWT_Delay_Init+0x5c>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a0e      	ldr	r2, [pc, #56]	; (80005d4 <DWT_Delay_Init+0x5c>)
 800059a:	f023 0301 	bic.w	r3, r3, #1
 800059e:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80005a0:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <DWT_Delay_Init+0x5c>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a0b      	ldr	r2, [pc, #44]	; (80005d4 <DWT_Delay_Init+0x5c>)
 80005a6:	f043 0301 	orr.w	r3, r3, #1
 80005aa:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 80005ac:	4b09      	ldr	r3, [pc, #36]	; (80005d4 <DWT_Delay_Init+0x5c>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 80005b2:	bf00      	nop
     __ASM volatile ("NOP");
 80005b4:	bf00      	nop
  __ASM volatile ("NOP");
 80005b6:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <DWT_Delay_Init+0x5c>)
 80005ba:	685b      	ldr	r3, [r3, #4]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 80005c0:	2300      	movs	r3, #0
 80005c2:	e000      	b.n	80005c6 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 80005c4:	2301      	movs	r3, #1
  }
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr
 80005d0:	e000edf0 	.word	0xe000edf0
 80005d4:	e0001000 	.word	0xe0001000

080005d8 <delay>:

__STATIC_INLINE void delay(volatile uint32_t microseconds)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 80005e0:	4b0d      	ldr	r3, [pc, #52]	; (8000618 <delay+0x40>)
 80005e2:	685b      	ldr	r3, [r3, #4]
 80005e4:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80005e6:	f002 fc49 	bl	8002e7c <HAL_RCC_GetHCLKFreq>
 80005ea:	4603      	mov	r3, r0
 80005ec:	4a0b      	ldr	r2, [pc, #44]	; (800061c <delay+0x44>)
 80005ee:	fba2 2303 	umull	r2, r3, r2, r3
 80005f2:	0c9b      	lsrs	r3, r3, #18
 80005f4:	687a      	ldr	r2, [r7, #4]
 80005f6:	fb02 f303 	mul.w	r3, r2, r3
 80005fa:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80005fc:	bf00      	nop
 80005fe:	4b06      	ldr	r3, [pc, #24]	; (8000618 <delay+0x40>)
 8000600:	685a      	ldr	r2, [r3, #4]
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	1ad2      	subs	r2, r2, r3
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	429a      	cmp	r2, r3
 800060a:	d3f8      	bcc.n	80005fe <delay+0x26>
}
 800060c:	bf00      	nop
 800060e:	bf00      	nop
 8000610:	3710      	adds	r7, #16
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	e0001000 	.word	0xe0001000
 800061c:	431bde83 	.word	0x431bde83

08000620 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b088      	sub	sp, #32
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	460b      	mov	r3, r1
 800062a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 800063c:	887b      	ldrh	r3, [r7, #2]
 800063e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000640:	2301      	movs	r3, #1
 8000642:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000644:	2300      	movs	r3, #0
 8000646:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000648:	f107 030c 	add.w	r3, r7, #12
 800064c:	4619      	mov	r1, r3
 800064e:	6878      	ldr	r0, [r7, #4]
 8000650:	f001 fe1e 	bl	8002290 <HAL_GPIO_Init>
}
 8000654:	bf00      	nop
 8000656:	3720      	adds	r7, #32
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}

0800065c <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b088      	sub	sp, #32
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	460b      	mov	r3, r1
 8000666:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000678:	887b      	ldrh	r3, [r7, #2]
 800067a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800067c:	2300      	movs	r3, #0
 800067e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000680:	2301      	movs	r3, #1
 8000682:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000684:	f107 030c 	add.w	r3, r7, #12
 8000688:	4619      	mov	r1, r3
 800068a:	6878      	ldr	r0, [r7, #4]
 800068c:	f001 fe00 	bl	8002290 <HAL_GPIO_Init>
}
 8000690:	bf00      	nop
 8000692:	3720      	adds	r7, #32
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}

08000698 <DHT_Start>:


void DHT_Start (void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 800069c:	f7ff ff6c 	bl	8000578 <DWT_Delay_Init>
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 80006a0:	2110      	movs	r1, #16
 80006a2:	480d      	ldr	r0, [pc, #52]	; (80006d8 <DHT_Start+0x40>)
 80006a4:	f7ff ffbc 	bl	8000620 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);   // pull the pin low
 80006a8:	2200      	movs	r2, #0
 80006aa:	2110      	movs	r1, #16
 80006ac:	480a      	ldr	r0, [pc, #40]	; (80006d8 <DHT_Start+0x40>)
 80006ae:	f001 ff8b 	bl	80025c8 <HAL_GPIO_WritePin>

#if defined(TYPE_DHT11)
	delay (18000);   // wait for 18ms
 80006b2:	f244 6050 	movw	r0, #18000	; 0x4650
 80006b6:	f7ff ff8f 	bl	80005d8 <delay>

#if defined(TYPE_DHT22)
	delay (1200);  // >1ms delay
#endif

    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 1);   // pull the pin high
 80006ba:	2201      	movs	r2, #1
 80006bc:	2110      	movs	r1, #16
 80006be:	4806      	ldr	r0, [pc, #24]	; (80006d8 <DHT_Start+0x40>)
 80006c0:	f001 ff82 	bl	80025c8 <HAL_GPIO_WritePin>
    delay (20);   // wait for 30us
 80006c4:	2014      	movs	r0, #20
 80006c6:	f7ff ff87 	bl	80005d8 <delay>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 80006ca:	2110      	movs	r1, #16
 80006cc:	4802      	ldr	r0, [pc, #8]	; (80006d8 <DHT_Start+0x40>)
 80006ce:	f7ff ffc5 	bl	800065c <Set_Pin_Input>
}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40020000 	.word	0x40020000

080006dc <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	71fb      	strb	r3, [r7, #7]
	delay (40);
 80006e6:	2028      	movs	r0, #40	; 0x28
 80006e8:	f7ff ff76 	bl	80005d8 <delay>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 80006ec:	2110      	movs	r1, #16
 80006ee:	4811      	ldr	r0, [pc, #68]	; (8000734 <DHT_Check_Response+0x58>)
 80006f0:	f001 ff52 	bl	8002598 <HAL_GPIO_ReadPin>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d10e      	bne.n	8000718 <DHT_Check_Response+0x3c>
	{
		delay (80);
 80006fa:	2050      	movs	r0, #80	; 0x50
 80006fc:	f7ff ff6c 	bl	80005d8 <delay>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
 8000700:	2110      	movs	r1, #16
 8000702:	480c      	ldr	r0, [pc, #48]	; (8000734 <DHT_Check_Response+0x58>)
 8000704:	f001 ff48 	bl	8002598 <HAL_GPIO_ReadPin>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d002      	beq.n	8000714 <DHT_Check_Response+0x38>
 800070e:	2301      	movs	r3, #1
 8000710:	71fb      	strb	r3, [r7, #7]
 8000712:	e001      	b.n	8000718 <DHT_Check_Response+0x3c>
		else Response = -1;
 8000714:	23ff      	movs	r3, #255	; 0xff
 8000716:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 8000718:	bf00      	nop
 800071a:	2110      	movs	r1, #16
 800071c:	4805      	ldr	r0, [pc, #20]	; (8000734 <DHT_Check_Response+0x58>)
 800071e:	f001 ff3b 	bl	8002598 <HAL_GPIO_ReadPin>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d1f8      	bne.n	800071a <DHT_Check_Response+0x3e>

	return Response;
 8000728:	79fb      	ldrb	r3, [r7, #7]
}
 800072a:	4618      	mov	r0, r3
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	40020000 	.word	0x40020000

08000738 <DHT_Read>:

uint8_t DHT_Read (void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 800073e:	2300      	movs	r3, #0
 8000740:	71bb      	strb	r3, [r7, #6]
 8000742:	e037      	b.n	80007b4 <DHT_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 8000744:	bf00      	nop
 8000746:	2110      	movs	r1, #16
 8000748:	481e      	ldr	r0, [pc, #120]	; (80007c4 <DHT_Read+0x8c>)
 800074a:	f001 ff25 	bl	8002598 <HAL_GPIO_ReadPin>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d0f8      	beq.n	8000746 <DHT_Read+0xe>
		delay (40);   // wait for 40 us
 8000754:	2028      	movs	r0, #40	; 0x28
 8000756:	f7ff ff3f 	bl	80005d8 <delay>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 800075a:	2110      	movs	r1, #16
 800075c:	4819      	ldr	r0, [pc, #100]	; (80007c4 <DHT_Read+0x8c>)
 800075e:	f001 ff1b 	bl	8002598 <HAL_GPIO_ReadPin>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d10e      	bne.n	8000786 <DHT_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 8000768:	79bb      	ldrb	r3, [r7, #6]
 800076a:	f1c3 0307 	rsb	r3, r3, #7
 800076e:	2201      	movs	r2, #1
 8000770:	fa02 f303 	lsl.w	r3, r2, r3
 8000774:	b25b      	sxtb	r3, r3
 8000776:	43db      	mvns	r3, r3
 8000778:	b25a      	sxtb	r2, r3
 800077a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800077e:	4013      	ands	r3, r2
 8000780:	b25b      	sxtb	r3, r3
 8000782:	71fb      	strb	r3, [r7, #7]
 8000784:	e00b      	b.n	800079e <DHT_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8000786:	79bb      	ldrb	r3, [r7, #6]
 8000788:	f1c3 0307 	rsb	r3, r3, #7
 800078c:	2201      	movs	r2, #1
 800078e:	fa02 f303 	lsl.w	r3, r2, r3
 8000792:	b25a      	sxtb	r2, r3
 8000794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000798:	4313      	orrs	r3, r2
 800079a:	b25b      	sxtb	r3, r3
 800079c:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 800079e:	bf00      	nop
 80007a0:	2110      	movs	r1, #16
 80007a2:	4808      	ldr	r0, [pc, #32]	; (80007c4 <DHT_Read+0x8c>)
 80007a4:	f001 fef8 	bl	8002598 <HAL_GPIO_ReadPin>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d1f8      	bne.n	80007a0 <DHT_Read+0x68>
	for (j=0;j<8;j++)
 80007ae:	79bb      	ldrb	r3, [r7, #6]
 80007b0:	3301      	adds	r3, #1
 80007b2:	71bb      	strb	r3, [r7, #6]
 80007b4:	79bb      	ldrb	r3, [r7, #6]
 80007b6:	2b07      	cmp	r3, #7
 80007b8:	d9c4      	bls.n	8000744 <DHT_Read+0xc>
	}
	return i;
 80007ba:	79fb      	ldrb	r3, [r7, #7]
}
 80007bc:	4618      	mov	r0, r3
 80007be:	3708      	adds	r7, #8
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	40020000 	.word	0x40020000

080007c8 <DHT_GetData>:



void DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
    DHT_Start ();
 80007d0:	f7ff ff62 	bl	8000698 <DHT_Start>
	Presence = DHT_Check_Response ();
 80007d4:	f7ff ff82 	bl	80006dc <DHT_Check_Response>
 80007d8:	4603      	mov	r3, r0
 80007da:	461a      	mov	r2, r3
 80007dc:	4b23      	ldr	r3, [pc, #140]	; (800086c <DHT_GetData+0xa4>)
 80007de:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 80007e0:	f7ff ffaa 	bl	8000738 <DHT_Read>
 80007e4:	4603      	mov	r3, r0
 80007e6:	461a      	mov	r2, r3
 80007e8:	4b21      	ldr	r3, [pc, #132]	; (8000870 <DHT_GetData+0xa8>)
 80007ea:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 80007ec:	f7ff ffa4 	bl	8000738 <DHT_Read>
 80007f0:	4603      	mov	r3, r0
 80007f2:	461a      	mov	r2, r3
 80007f4:	4b1f      	ldr	r3, [pc, #124]	; (8000874 <DHT_GetData+0xac>)
 80007f6:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 80007f8:	f7ff ff9e 	bl	8000738 <DHT_Read>
 80007fc:	4603      	mov	r3, r0
 80007fe:	461a      	mov	r2, r3
 8000800:	4b1d      	ldr	r3, [pc, #116]	; (8000878 <DHT_GetData+0xb0>)
 8000802:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 8000804:	f7ff ff98 	bl	8000738 <DHT_Read>
 8000808:	4603      	mov	r3, r0
 800080a:	461a      	mov	r2, r3
 800080c:	4b1b      	ldr	r3, [pc, #108]	; (800087c <DHT_GetData+0xb4>)
 800080e:	701a      	strb	r2, [r3, #0]
	SUM = DHT_Read();
 8000810:	f7ff ff92 	bl	8000738 <DHT_Read>
 8000814:	4603      	mov	r3, r0
 8000816:	b29a      	uxth	r2, r3
 8000818:	4b19      	ldr	r3, [pc, #100]	; (8000880 <DHT_GetData+0xb8>)
 800081a:	801a      	strh	r2, [r3, #0]

	if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 800081c:	4b18      	ldr	r3, [pc, #96]	; (8000880 <DHT_GetData+0xb8>)
 800081e:	881b      	ldrh	r3, [r3, #0]
 8000820:	4619      	mov	r1, r3
 8000822:	4b13      	ldr	r3, [pc, #76]	; (8000870 <DHT_GetData+0xa8>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	461a      	mov	r2, r3
 8000828:	4b12      	ldr	r3, [pc, #72]	; (8000874 <DHT_GetData+0xac>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	4413      	add	r3, r2
 800082e:	4a12      	ldr	r2, [pc, #72]	; (8000878 <DHT_GetData+0xb0>)
 8000830:	7812      	ldrb	r2, [r2, #0]
 8000832:	4413      	add	r3, r2
 8000834:	4a11      	ldr	r2, [pc, #68]	; (800087c <DHT_GetData+0xb4>)
 8000836:	7812      	ldrb	r2, [r2, #0]
 8000838:	4413      	add	r3, r2
 800083a:	4299      	cmp	r1, r3
 800083c:	d111      	bne.n	8000862 <DHT_GetData+0x9a>
	{
		#if defined(TYPE_DHT11)
			DHT_Data->Temperature = Temp_byte1;
 800083e:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <DHT_GetData+0xb0>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	ee07 3a90 	vmov	s15, r3
 8000846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	edc3 7a00 	vstr	s15, [r3]
			DHT_Data->Humidity = Rh_byte1;
 8000850:	4b07      	ldr	r3, [pc, #28]	; (8000870 <DHT_GetData+0xa8>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	ee07 3a90 	vmov	s15, r3
 8000858:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	edc3 7a01 	vstr	s15, [r3, #4]
		#if defined(TYPE_DHT22)
			DHT_Data->Temperature = ((Temp_byte1<<8)|Temp_byte2);
			DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2);
		#endif
	}
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	2000008c 	.word	0x2000008c
 8000870:	20000104 	.word	0x20000104
 8000874:	20000106 	.word	0x20000106
 8000878:	20000105 	.word	0x20000105
 800087c:	2000010a 	.word	0x2000010a
 8000880:	20000108 	.word	0x20000108

08000884 <delay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
__STATIC_INLINE void delay(volatile uint32_t microseconds)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 800088c:	4b0d      	ldr	r3, [pc, #52]	; (80008c4 <delay+0x40>)
 800088e:	685b      	ldr	r3, [r3, #4]
 8000890:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000892:	f002 faf3 	bl	8002e7c <HAL_RCC_GetHCLKFreq>
 8000896:	4603      	mov	r3, r0
 8000898:	4a0b      	ldr	r2, [pc, #44]	; (80008c8 <delay+0x44>)
 800089a:	fba2 2303 	umull	r2, r3, r2, r3
 800089e:	0c9b      	lsrs	r3, r3, #18
 80008a0:	687a      	ldr	r2, [r7, #4]
 80008a2:	fb02 f303 	mul.w	r3, r2, r3
 80008a6:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80008a8:	bf00      	nop
 80008aa:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <delay+0x40>)
 80008ac:	685a      	ldr	r2, [r3, #4]
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	1ad2      	subs	r2, r2, r3
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	429a      	cmp	r2, r3
 80008b6:	d3f8      	bcc.n	80008aa <delay+0x26>
}
 80008b8:	bf00      	nop
 80008ba:	bf00      	nop
 80008bc:	3710      	adds	r7, #16
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	e0001000 	.word	0xe0001000
 80008c8:	431bde83 	.word	0x431bde83

080008cc <poll_dht>:

DHT_DataTypedef poll_dht() {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b086      	sub	sp, #24
 80008d0:	af00      	add	r7, sp, #0
	// https://controllerstech.com/using-dht11-sensor-with-stm32/
	DHT_DataTypedef data;
	DHT_GetData(&data);
 80008d2:	f107 0308 	add.w	r3, r7, #8
 80008d6:	4618      	mov	r0, r3
 80008d8:	f7ff ff76 	bl	80007c8 <DHT_GetData>
	return data;
 80008dc:	f107 0310 	add.w	r3, r7, #16
 80008e0:	f107 0208 	add.w	r2, r7, #8
 80008e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008e8:	e883 0003 	stmia.w	r3, {r0, r1}
 80008ec:	693a      	ldr	r2, [r7, #16]
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	ee07 2a10 	vmov	s14, r2
 80008f4:	ee07 3a90 	vmov	s15, r3
}
 80008f8:	eeb0 0a47 	vmov.f32	s0, s14
 80008fc:	eef0 0a67 	vmov.f32	s1, s15
 8000900:	3718      	adds	r7, #24
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
	...

08000908 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
	// https://controllerstech.com/stm32-adc-multiple-channels/

	uint32_t analog_ldr = value[0];
 8000910:	4b0a      	ldr	r3, [pc, #40]	; (800093c <HAL_ADC_ConvCpltCallback+0x34>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	60fb      	str	r3, [r7, #12]
	uint32_t analog_dust = value[1];
 8000916:	4b09      	ldr	r3, [pc, #36]	; (800093c <HAL_ADC_ConvCpltCallback+0x34>)
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	60bb      	str	r3, [r7, #8]


	// https://maker.pro/arduino/projects/arduino-uno-sharp-dust-sensor-tutorial
	delay(40);
 800091c:	2028      	movs	r0, #40	; 0x28
 800091e:	f7ff ffb1 	bl	8000884 <delay>
	HAL_GPIO_WritePin(Dust_LED_GPIO_Port, Dust_LED_Pin, GPIO_PIN_SET);
 8000922:	2201      	movs	r2, #1
 8000924:	2180      	movs	r1, #128	; 0x80
 8000926:	4806      	ldr	r0, [pc, #24]	; (8000940 <HAL_ADC_ConvCpltCallback+0x38>)
 8000928:	f001 fe4e 	bl	80025c8 <HAL_GPIO_WritePin>
	float dust_density = 0.17*volt_dust-0.1;

	int len = sprintf(buf, "%d %d\r\n", analog_ldr, (int)(1000*volt_dust));
	HAL_UART_Transmit(&huart2, buf, len, 1000);*/

	dwm_lock = false;
 800092c:	4b05      	ldr	r3, [pc, #20]	; (8000944 <HAL_ADC_ConvCpltCallback+0x3c>)
 800092e:	2200      	movs	r2, #0
 8000930:	701a      	strb	r2, [r3, #0]
}
 8000932:	bf00      	nop
 8000934:	3710      	adds	r7, #16
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	200001f8 	.word	0x200001f8
 8000940:	40020000 	.word	0x40020000
 8000944:	200000f4 	.word	0x200000f4

08000948 <poll_analog>:
{
	uint32_t ldr;
	uint32_t dust;
} Analog;

Analog poll_analog() {
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
	dwm_lock = true;
 8000950:	4b13      	ldr	r3, [pc, #76]	; (80009a0 <poll_analog+0x58>)
 8000952:	2201      	movs	r2, #1
 8000954:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(Dust_LED_GPIO_Port, Dust_LED_Pin, GPIO_PIN_RESET);
 8000956:	2200      	movs	r2, #0
 8000958:	2180      	movs	r1, #128	; 0x80
 800095a:	4812      	ldr	r0, [pc, #72]	; (80009a4 <poll_analog+0x5c>)
 800095c:	f001 fe34 	bl	80025c8 <HAL_GPIO_WritePin>
	delay(280);
 8000960:	f44f 708c 	mov.w	r0, #280	; 0x118
 8000964:	f7ff ff8e 	bl	8000884 <delay>
	HAL_ADC_Start_DMA(&hadc1, value, 2);
 8000968:	2202      	movs	r2, #2
 800096a:	490f      	ldr	r1, [pc, #60]	; (80009a8 <poll_analog+0x60>)
 800096c:	480f      	ldr	r0, [pc, #60]	; (80009ac <poll_analog+0x64>)
 800096e:	f000 fc59 	bl	8001224 <HAL_ADC_Start_DMA>
	while(dwm_lock) {}
 8000972:	bf00      	nop
 8000974:	4b0a      	ldr	r3, [pc, #40]	; (80009a0 <poll_analog+0x58>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d1fb      	bne.n	8000974 <poll_analog+0x2c>
	Analog out;
	out.ldr = value[0];
 800097c:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <poll_analog+0x60>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	60bb      	str	r3, [r7, #8]
	out.dust = value[1];
 8000982:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <poll_analog+0x60>)
 8000984:	685b      	ldr	r3, [r3, #4]
 8000986:	60fb      	str	r3, [r7, #12]
	return out;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	461a      	mov	r2, r3
 800098c:	f107 0308 	add.w	r3, r7, #8
 8000990:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000994:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000998:	6878      	ldr	r0, [r7, #4]
 800099a:	3710      	adds	r7, #16
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	200000f4 	.word	0x200000f4
 80009a4:	40020000 	.word	0x40020000
 80009a8:	200001f8 	.word	0x200001f8
 80009ac:	2000010c 	.word	0x2000010c

080009b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08a      	sub	sp, #40	; 0x28
 80009b4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009b6:	f000 fb5b 	bl	8001070 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ba:	f000 f845 	bl	8000a48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009be:	f000 f957 	bl	8000c70 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80009c2:	f000 f90b 	bl	8000bdc <MX_USART2_UART_Init>
  MX_DMA_Init();
 80009c6:	f000 f933 	bl	8000c30 <MX_DMA_Init>
  MX_ADC1_Init();
 80009ca:	f000 f8a7 	bl	8000b1c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  // HAL_Delay(3000);
  DWT_Delay_Init();
 80009ce:	f7ff fdd3 	bl	8000578 <DWT_Delay_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(3000);
 80009d2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80009d6:	f000 fbbd 	bl	8001154 <HAL_Delay>
	  DHT_DataTypedef dht = poll_dht();
 80009da:	f7ff ff77 	bl	80008cc <poll_dht>
 80009de:	eeb0 7a40 	vmov.f32	s14, s0
 80009e2:	eef0 7a60 	vmov.f32	s15, s1
 80009e6:	ed87 7a03 	vstr	s14, [r7, #12]
 80009ea:	edc7 7a04 	vstr	s15, [r7, #16]
	  Analog analog = poll_analog();
 80009ee:	1d3b      	adds	r3, r7, #4
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff ffa9 	bl	8000948 <poll_analog>


	  float temp = dht.Temperature;
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	61fb      	str	r3, [r7, #28]
	  float hum = dht.Humidity;
 80009fa:	693b      	ldr	r3, [r7, #16]
 80009fc:	61bb      	str	r3, [r7, #24]

	  int len = sprintf(
 80009fe:	edd7 7a07 	vldr	s15, [r7, #28]
 8000a02:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8000a06:	edd7 7a06 	vldr	s15, [r7, #24]
 8000a0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	68ba      	ldr	r2, [r7, #8]
 8000a12:	9201      	str	r2, [sp, #4]
 8000a14:	9300      	str	r3, [sp, #0]
 8000a16:	ee17 3a90 	vmov	r3, s15
 8000a1a:	ee17 2a10 	vmov	r2, s14
 8000a1e:	4907      	ldr	r1, [pc, #28]	; (8000a3c <main+0x8c>)
 8000a20:	4807      	ldr	r0, [pc, #28]	; (8000a40 <main+0x90>)
 8000a22:	f002 fda7 	bl	8003574 <siprintf>
 8000a26:	6178      	str	r0, [r7, #20]
			  (int)(temp),
			  (int)(hum),
			  analog.ldr,
			  analog.dust
	  );
	  HAL_UART_Transmit(&huart2, buf, len, 1000);
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	b29a      	uxth	r2, r3
 8000a2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a30:	4903      	ldr	r1, [pc, #12]	; (8000a40 <main+0x90>)
 8000a32:	4804      	ldr	r0, [pc, #16]	; (8000a44 <main+0x94>)
 8000a34:	f002 faa3 	bl	8002f7e <HAL_UART_Transmit>
  {
 8000a38:	e7cb      	b.n	80009d2 <main+0x22>
 8000a3a:	bf00      	nop
 8000a3c:	08003de8 	.word	0x08003de8
 8000a40:	20000090 	.word	0x20000090
 8000a44:	200001b4 	.word	0x200001b4

08000a48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b094      	sub	sp, #80	; 0x50
 8000a4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a4e:	f107 0320 	add.w	r3, r7, #32
 8000a52:	2230      	movs	r2, #48	; 0x30
 8000a54:	2100      	movs	r1, #0
 8000a56:	4618      	mov	r0, r3
 8000a58:	f002 fd84 	bl	8003564 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a5c:	f107 030c 	add.w	r3, r7, #12
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60bb      	str	r3, [r7, #8]
 8000a70:	4b28      	ldr	r3, [pc, #160]	; (8000b14 <SystemClock_Config+0xcc>)
 8000a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a74:	4a27      	ldr	r2, [pc, #156]	; (8000b14 <SystemClock_Config+0xcc>)
 8000a76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a7a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a7c:	4b25      	ldr	r3, [pc, #148]	; (8000b14 <SystemClock_Config+0xcc>)
 8000a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a84:	60bb      	str	r3, [r7, #8]
 8000a86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a88:	2300      	movs	r3, #0
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	4b22      	ldr	r3, [pc, #136]	; (8000b18 <SystemClock_Config+0xd0>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a21      	ldr	r2, [pc, #132]	; (8000b18 <SystemClock_Config+0xd0>)
 8000a92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a96:	6013      	str	r3, [r2, #0]
 8000a98:	4b1f      	ldr	r3, [pc, #124]	; (8000b18 <SystemClock_Config+0xd0>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000aa0:	607b      	str	r3, [r7, #4]
 8000aa2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aac:	2310      	movs	r3, #16
 8000aae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000ab8:	2310      	movs	r3, #16
 8000aba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000abc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000ac0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ac2:	2304      	movs	r3, #4
 8000ac4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ac6:	2304      	movs	r3, #4
 8000ac8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aca:	f107 0320 	add.w	r3, r7, #32
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f001 fd94 	bl	80025fc <HAL_RCC_OscConfig>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000ada:	f000 f937 	bl	8000d4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ade:	230f      	movs	r3, #15
 8000ae0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000aea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000af0:	2300      	movs	r3, #0
 8000af2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000af4:	f107 030c 	add.w	r3, r7, #12
 8000af8:	2102      	movs	r1, #2
 8000afa:	4618      	mov	r0, r3
 8000afc:	f001 fff6 	bl	8002aec <HAL_RCC_ClockConfig>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b06:	f000 f921 	bl	8000d4c <Error_Handler>
  }
}
 8000b0a:	bf00      	nop
 8000b0c:	3750      	adds	r7, #80	; 0x50
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40023800 	.word	0x40023800
 8000b18:	40007000 	.word	0x40007000

08000b1c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b22:	463b      	mov	r3, r7
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b2e:	4b28      	ldr	r3, [pc, #160]	; (8000bd0 <MX_ADC1_Init+0xb4>)
 8000b30:	4a28      	ldr	r2, [pc, #160]	; (8000bd4 <MX_ADC1_Init+0xb8>)
 8000b32:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b34:	4b26      	ldr	r3, [pc, #152]	; (8000bd0 <MX_ADC1_Init+0xb4>)
 8000b36:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b3a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b3c:	4b24      	ldr	r3, [pc, #144]	; (8000bd0 <MX_ADC1_Init+0xb4>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000b42:	4b23      	ldr	r3, [pc, #140]	; (8000bd0 <MX_ADC1_Init+0xb4>)
 8000b44:	2201      	movs	r2, #1
 8000b46:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b48:	4b21      	ldr	r3, [pc, #132]	; (8000bd0 <MX_ADC1_Init+0xb4>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b4e:	4b20      	ldr	r3, [pc, #128]	; (8000bd0 <MX_ADC1_Init+0xb4>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b56:	4b1e      	ldr	r3, [pc, #120]	; (8000bd0 <MX_ADC1_Init+0xb4>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b5c:	4b1c      	ldr	r3, [pc, #112]	; (8000bd0 <MX_ADC1_Init+0xb4>)
 8000b5e:	4a1e      	ldr	r2, [pc, #120]	; (8000bd8 <MX_ADC1_Init+0xbc>)
 8000b60:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b62:	4b1b      	ldr	r3, [pc, #108]	; (8000bd0 <MX_ADC1_Init+0xb4>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000b68:	4b19      	ldr	r3, [pc, #100]	; (8000bd0 <MX_ADC1_Init+0xb4>)
 8000b6a:	2202      	movs	r2, #2
 8000b6c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b6e:	4b18      	ldr	r3, [pc, #96]	; (8000bd0 <MX_ADC1_Init+0xb4>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b76:	4b16      	ldr	r3, [pc, #88]	; (8000bd0 <MX_ADC1_Init+0xb4>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b7c:	4814      	ldr	r0, [pc, #80]	; (8000bd0 <MX_ADC1_Init+0xb4>)
 8000b7e:	f000 fb0d 	bl	800119c <HAL_ADC_Init>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000b88:	f000 f8e0 	bl	8000d4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000b90:	2301      	movs	r3, #1
 8000b92:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b94:	2300      	movs	r3, #0
 8000b96:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b98:	463b      	mov	r3, r7
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	480c      	ldr	r0, [pc, #48]	; (8000bd0 <MX_ADC1_Init+0xb4>)
 8000b9e:	f000 fc45 	bl	800142c <HAL_ADC_ConfigChannel>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ba8:	f000 f8d0 	bl	8000d4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000bac:	2306      	movs	r3, #6
 8000bae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bb4:	463b      	mov	r3, r7
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4805      	ldr	r0, [pc, #20]	; (8000bd0 <MX_ADC1_Init+0xb4>)
 8000bba:	f000 fc37 	bl	800142c <HAL_ADC_ConfigChannel>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000bc4:	f000 f8c2 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bc8:	bf00      	nop
 8000bca:	3710      	adds	r7, #16
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	2000010c 	.word	0x2000010c
 8000bd4:	40012000 	.word	0x40012000
 8000bd8:	0f000001 	.word	0x0f000001

08000bdc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000be0:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <MX_USART2_UART_Init+0x4c>)
 8000be2:	4a12      	ldr	r2, [pc, #72]	; (8000c2c <MX_USART2_UART_Init+0x50>)
 8000be4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000be6:	4b10      	ldr	r3, [pc, #64]	; (8000c28 <MX_USART2_UART_Init+0x4c>)
 8000be8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bee:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <MX_USART2_UART_Init+0x4c>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <MX_USART2_UART_Init+0x4c>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bfa:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <MX_USART2_UART_Init+0x4c>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c00:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <MX_USART2_UART_Init+0x4c>)
 8000c02:	220c      	movs	r2, #12
 8000c04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c06:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <MX_USART2_UART_Init+0x4c>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <MX_USART2_UART_Init+0x4c>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c12:	4805      	ldr	r0, [pc, #20]	; (8000c28 <MX_USART2_UART_Init+0x4c>)
 8000c14:	f002 f966 	bl	8002ee4 <HAL_UART_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c1e:	f000 f895 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	200001b4 	.word	0x200001b4
 8000c2c:	40004400 	.word	0x40004400

08000c30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	607b      	str	r3, [r7, #4]
 8000c3a:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <MX_DMA_Init+0x3c>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	4a0b      	ldr	r2, [pc, #44]	; (8000c6c <MX_DMA_Init+0x3c>)
 8000c40:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c44:	6313      	str	r3, [r2, #48]	; 0x30
 8000c46:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <MX_DMA_Init+0x3c>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c4e:	607b      	str	r3, [r7, #4]
 8000c50:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000c52:	2200      	movs	r2, #0
 8000c54:	2100      	movs	r1, #0
 8000c56:	2038      	movs	r0, #56	; 0x38
 8000c58:	f000 ff73 	bl	8001b42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c5c:	2038      	movs	r0, #56	; 0x38
 8000c5e:	f000 ff8c 	bl	8001b7a <HAL_NVIC_EnableIRQ>

}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40023800 	.word	0x40023800

08000c70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b08a      	sub	sp, #40	; 0x28
 8000c74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c76:	f107 0314 	add.w	r3, r7, #20
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]
 8000c80:	609a      	str	r2, [r3, #8]
 8000c82:	60da      	str	r2, [r3, #12]
 8000c84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	613b      	str	r3, [r7, #16]
 8000c8a:	4b2d      	ldr	r3, [pc, #180]	; (8000d40 <MX_GPIO_Init+0xd0>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a2c      	ldr	r2, [pc, #176]	; (8000d40 <MX_GPIO_Init+0xd0>)
 8000c90:	f043 0304 	orr.w	r3, r3, #4
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b2a      	ldr	r3, [pc, #168]	; (8000d40 <MX_GPIO_Init+0xd0>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0304 	and.w	r3, r3, #4
 8000c9e:	613b      	str	r3, [r7, #16]
 8000ca0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	4b26      	ldr	r3, [pc, #152]	; (8000d40 <MX_GPIO_Init+0xd0>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a25      	ldr	r2, [pc, #148]	; (8000d40 <MX_GPIO_Init+0xd0>)
 8000cac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b23      	ldr	r3, [pc, #140]	; (8000d40 <MX_GPIO_Init+0xd0>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60bb      	str	r3, [r7, #8]
 8000cc2:	4b1f      	ldr	r3, [pc, #124]	; (8000d40 <MX_GPIO_Init+0xd0>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	4a1e      	ldr	r2, [pc, #120]	; (8000d40 <MX_GPIO_Init+0xd0>)
 8000cc8:	f043 0301 	orr.w	r3, r3, #1
 8000ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cce:	4b1c      	ldr	r3, [pc, #112]	; (8000d40 <MX_GPIO_Init+0xd0>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	60bb      	str	r3, [r7, #8]
 8000cd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	607b      	str	r3, [r7, #4]
 8000cde:	4b18      	ldr	r3, [pc, #96]	; (8000d40 <MX_GPIO_Init+0xd0>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	4a17      	ldr	r2, [pc, #92]	; (8000d40 <MX_GPIO_Init+0xd0>)
 8000ce4:	f043 0302 	orr.w	r3, r3, #2
 8000ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cea:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <MX_GPIO_Init+0xd0>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	f003 0302 	and.w	r3, r3, #2
 8000cf2:	607b      	str	r3, [r7, #4]
 8000cf4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Dust_LED_Pin, GPIO_PIN_RESET);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	21a0      	movs	r1, #160	; 0xa0
 8000cfa:	4812      	ldr	r0, [pc, #72]	; (8000d44 <MX_GPIO_Init+0xd4>)
 8000cfc:	f001 fc64 	bl	80025c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d06:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d10:	f107 0314 	add.w	r3, r7, #20
 8000d14:	4619      	mov	r1, r3
 8000d16:	480c      	ldr	r0, [pc, #48]	; (8000d48 <MX_GPIO_Init+0xd8>)
 8000d18:	f001 faba 	bl	8002290 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Dust_LED_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Dust_LED_Pin;
 8000d1c:	23a0      	movs	r3, #160	; 0xa0
 8000d1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d20:	2301      	movs	r3, #1
 8000d22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2c:	f107 0314 	add.w	r3, r7, #20
 8000d30:	4619      	mov	r1, r3
 8000d32:	4804      	ldr	r0, [pc, #16]	; (8000d44 <MX_GPIO_Init+0xd4>)
 8000d34:	f001 faac 	bl	8002290 <HAL_GPIO_Init>

}
 8000d38:	bf00      	nop
 8000d3a:	3728      	adds	r7, #40	; 0x28
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40023800 	.word	0x40023800
 8000d44:	40020000 	.word	0x40020000
 8000d48:	40020800 	.word	0x40020800

08000d4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d50:	b672      	cpsid	i
}
 8000d52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <Error_Handler+0x8>
	...

08000d58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	607b      	str	r3, [r7, #4]
 8000d62:	4b10      	ldr	r3, [pc, #64]	; (8000da4 <HAL_MspInit+0x4c>)
 8000d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d66:	4a0f      	ldr	r2, [pc, #60]	; (8000da4 <HAL_MspInit+0x4c>)
 8000d68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d6e:	4b0d      	ldr	r3, [pc, #52]	; (8000da4 <HAL_MspInit+0x4c>)
 8000d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d76:	607b      	str	r3, [r7, #4]
 8000d78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	603b      	str	r3, [r7, #0]
 8000d7e:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <HAL_MspInit+0x4c>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d82:	4a08      	ldr	r2, [pc, #32]	; (8000da4 <HAL_MspInit+0x4c>)
 8000d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d88:	6413      	str	r3, [r2, #64]	; 0x40
 8000d8a:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <HAL_MspInit+0x4c>)
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d92:	603b      	str	r3, [r7, #0]
 8000d94:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d96:	2007      	movs	r0, #7
 8000d98:	f000 fec8 	bl	8001b2c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d9c:	bf00      	nop
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	40023800 	.word	0x40023800

08000da8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08a      	sub	sp, #40	; 0x28
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a2e      	ldr	r2, [pc, #184]	; (8000e80 <HAL_ADC_MspInit+0xd8>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d156      	bne.n	8000e78 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	613b      	str	r3, [r7, #16]
 8000dce:	4b2d      	ldr	r3, [pc, #180]	; (8000e84 <HAL_ADC_MspInit+0xdc>)
 8000dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd2:	4a2c      	ldr	r2, [pc, #176]	; (8000e84 <HAL_ADC_MspInit+0xdc>)
 8000dd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dda:	4b2a      	ldr	r3, [pc, #168]	; (8000e84 <HAL_ADC_MspInit+0xdc>)
 8000ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000de2:	613b      	str	r3, [r7, #16]
 8000de4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	4b26      	ldr	r3, [pc, #152]	; (8000e84 <HAL_ADC_MspInit+0xdc>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	4a25      	ldr	r2, [pc, #148]	; (8000e84 <HAL_ADC_MspInit+0xdc>)
 8000df0:	f043 0301 	orr.w	r3, r3, #1
 8000df4:	6313      	str	r3, [r2, #48]	; 0x30
 8000df6:	4b23      	ldr	r3, [pc, #140]	; (8000e84 <HAL_ADC_MspInit+0xdc>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 8000e02:	2342      	movs	r3, #66	; 0x42
 8000e04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e06:	2303      	movs	r3, #3
 8000e08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0e:	f107 0314 	add.w	r3, r7, #20
 8000e12:	4619      	mov	r1, r3
 8000e14:	481c      	ldr	r0, [pc, #112]	; (8000e88 <HAL_ADC_MspInit+0xe0>)
 8000e16:	f001 fa3b 	bl	8002290 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000e1a:	4b1c      	ldr	r3, [pc, #112]	; (8000e8c <HAL_ADC_MspInit+0xe4>)
 8000e1c:	4a1c      	ldr	r2, [pc, #112]	; (8000e90 <HAL_ADC_MspInit+0xe8>)
 8000e1e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000e20:	4b1a      	ldr	r3, [pc, #104]	; (8000e8c <HAL_ADC_MspInit+0xe4>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e26:	4b19      	ldr	r3, [pc, #100]	; (8000e8c <HAL_ADC_MspInit+0xe4>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e2c:	4b17      	ldr	r3, [pc, #92]	; (8000e8c <HAL_ADC_MspInit+0xe4>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e32:	4b16      	ldr	r3, [pc, #88]	; (8000e8c <HAL_ADC_MspInit+0xe4>)
 8000e34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e38:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e3a:	4b14      	ldr	r3, [pc, #80]	; (8000e8c <HAL_ADC_MspInit+0xe4>)
 8000e3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e40:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e42:	4b12      	ldr	r3, [pc, #72]	; (8000e8c <HAL_ADC_MspInit+0xe4>)
 8000e44:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e48:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000e4a:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <HAL_ADC_MspInit+0xe4>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e50:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <HAL_ADC_MspInit+0xe4>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e56:	4b0d      	ldr	r3, [pc, #52]	; (8000e8c <HAL_ADC_MspInit+0xe4>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e5c:	480b      	ldr	r0, [pc, #44]	; (8000e8c <HAL_ADC_MspInit+0xe4>)
 8000e5e:	f000 fea7 	bl	8001bb0 <HAL_DMA_Init>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8000e68:	f7ff ff70 	bl	8000d4c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	4a07      	ldr	r2, [pc, #28]	; (8000e8c <HAL_ADC_MspInit+0xe4>)
 8000e70:	639a      	str	r2, [r3, #56]	; 0x38
 8000e72:	4a06      	ldr	r2, [pc, #24]	; (8000e8c <HAL_ADC_MspInit+0xe4>)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e78:	bf00      	nop
 8000e7a:	3728      	adds	r7, #40	; 0x28
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40012000 	.word	0x40012000
 8000e84:	40023800 	.word	0x40023800
 8000e88:	40020000 	.word	0x40020000
 8000e8c:	20000154 	.word	0x20000154
 8000e90:	40026410 	.word	0x40026410

08000e94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b08a      	sub	sp, #40	; 0x28
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9c:	f107 0314 	add.w	r3, r7, #20
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]
 8000eaa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a19      	ldr	r2, [pc, #100]	; (8000f18 <HAL_UART_MspInit+0x84>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d12b      	bne.n	8000f0e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	613b      	str	r3, [r7, #16]
 8000eba:	4b18      	ldr	r3, [pc, #96]	; (8000f1c <HAL_UART_MspInit+0x88>)
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebe:	4a17      	ldr	r2, [pc, #92]	; (8000f1c <HAL_UART_MspInit+0x88>)
 8000ec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ec4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ec6:	4b15      	ldr	r3, [pc, #84]	; (8000f1c <HAL_UART_MspInit+0x88>)
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ece:	613b      	str	r3, [r7, #16]
 8000ed0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60fb      	str	r3, [r7, #12]
 8000ed6:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <HAL_UART_MspInit+0x88>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	4a10      	ldr	r2, [pc, #64]	; (8000f1c <HAL_UART_MspInit+0x88>)
 8000edc:	f043 0301 	orr.w	r3, r3, #1
 8000ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee2:	4b0e      	ldr	r3, [pc, #56]	; (8000f1c <HAL_UART_MspInit+0x88>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000eee:	230c      	movs	r3, #12
 8000ef0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000efa:	2303      	movs	r3, #3
 8000efc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000efe:	2307      	movs	r3, #7
 8000f00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f02:	f107 0314 	add.w	r3, r7, #20
 8000f06:	4619      	mov	r1, r3
 8000f08:	4805      	ldr	r0, [pc, #20]	; (8000f20 <HAL_UART_MspInit+0x8c>)
 8000f0a:	f001 f9c1 	bl	8002290 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f0e:	bf00      	nop
 8000f10:	3728      	adds	r7, #40	; 0x28
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40004400 	.word	0x40004400
 8000f1c:	40023800 	.word	0x40023800
 8000f20:	40020000 	.word	0x40020000

08000f24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f28:	e7fe      	b.n	8000f28 <NMI_Handler+0x4>

08000f2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f2e:	e7fe      	b.n	8000f2e <HardFault_Handler+0x4>

08000f30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f34:	e7fe      	b.n	8000f34 <MemManage_Handler+0x4>

08000f36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f3a:	e7fe      	b.n	8000f3a <BusFault_Handler+0x4>

08000f3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f40:	e7fe      	b.n	8000f40 <UsageFault_Handler+0x4>

08000f42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr

08000f5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f70:	f000 f8d0 	bl	8001114 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000f7c:	4802      	ldr	r0, [pc, #8]	; (8000f88 <DMA2_Stream0_IRQHandler+0x10>)
 8000f7e:	f000 ff1d 	bl	8001dbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000154 	.word	0x20000154

08000f8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f94:	4a14      	ldr	r2, [pc, #80]	; (8000fe8 <_sbrk+0x5c>)
 8000f96:	4b15      	ldr	r3, [pc, #84]	; (8000fec <_sbrk+0x60>)
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fa0:	4b13      	ldr	r3, [pc, #76]	; (8000ff0 <_sbrk+0x64>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d102      	bne.n	8000fae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fa8:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <_sbrk+0x64>)
 8000faa:	4a12      	ldr	r2, [pc, #72]	; (8000ff4 <_sbrk+0x68>)
 8000fac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fae:	4b10      	ldr	r3, [pc, #64]	; (8000ff0 <_sbrk+0x64>)
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d207      	bcs.n	8000fcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fbc:	f002 faa8 	bl	8003510 <__errno>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	220c      	movs	r2, #12
 8000fc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fca:	e009      	b.n	8000fe0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fcc:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <_sbrk+0x64>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fd2:	4b07      	ldr	r3, [pc, #28]	; (8000ff0 <_sbrk+0x64>)
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4413      	add	r3, r2
 8000fda:	4a05      	ldr	r2, [pc, #20]	; (8000ff0 <_sbrk+0x64>)
 8000fdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fde:	68fb      	ldr	r3, [r7, #12]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3718      	adds	r7, #24
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20020000 	.word	0x20020000
 8000fec:	00000400 	.word	0x00000400
 8000ff0:	200000f8 	.word	0x200000f8
 8000ff4:	20000218 	.word	0x20000218

08000ff8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <SystemInit+0x20>)
 8000ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001002:	4a05      	ldr	r2, [pc, #20]	; (8001018 <SystemInit+0x20>)
 8001004:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001008:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800101c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001054 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001020:	480d      	ldr	r0, [pc, #52]	; (8001058 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001022:	490e      	ldr	r1, [pc, #56]	; (800105c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001024:	4a0e      	ldr	r2, [pc, #56]	; (8001060 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001026:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001028:	e002      	b.n	8001030 <LoopCopyDataInit>

0800102a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800102a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800102c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800102e:	3304      	adds	r3, #4

08001030 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001030:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001032:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001034:	d3f9      	bcc.n	800102a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001036:	4a0b      	ldr	r2, [pc, #44]	; (8001064 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001038:	4c0b      	ldr	r4, [pc, #44]	; (8001068 <LoopFillZerobss+0x26>)
  movs r3, #0
 800103a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800103c:	e001      	b.n	8001042 <LoopFillZerobss>

0800103e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800103e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001040:	3204      	adds	r2, #4

08001042 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001042:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001044:	d3fb      	bcc.n	800103e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001046:	f7ff ffd7 	bl	8000ff8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800104a:	f002 fa67 	bl	800351c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800104e:	f7ff fcaf 	bl	80009b0 <main>
  bx  lr    
 8001052:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001054:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001058:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800105c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001060:	08003e74 	.word	0x08003e74
  ldr r2, =_sbss
 8001064:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001068:	20000214 	.word	0x20000214

0800106c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800106c:	e7fe      	b.n	800106c <ADC_IRQHandler>
	...

08001070 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001074:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <HAL_Init+0x40>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a0d      	ldr	r2, [pc, #52]	; (80010b0 <HAL_Init+0x40>)
 800107a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800107e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001080:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <HAL_Init+0x40>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a0a      	ldr	r2, [pc, #40]	; (80010b0 <HAL_Init+0x40>)
 8001086:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800108a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800108c:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <HAL_Init+0x40>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a07      	ldr	r2, [pc, #28]	; (80010b0 <HAL_Init+0x40>)
 8001092:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001096:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001098:	2003      	movs	r0, #3
 800109a:	f000 fd47 	bl	8001b2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800109e:	2000      	movs	r0, #0
 80010a0:	f000 f808 	bl	80010b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010a4:	f7ff fe58 	bl	8000d58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40023c00 	.word	0x40023c00

080010b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010bc:	4b12      	ldr	r3, [pc, #72]	; (8001108 <HAL_InitTick+0x54>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	4b12      	ldr	r3, [pc, #72]	; (800110c <HAL_InitTick+0x58>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	4619      	mov	r1, r3
 80010c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80010d2:	4618      	mov	r0, r3
 80010d4:	f000 fd5f 	bl	8001b96 <HAL_SYSTICK_Config>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e00e      	b.n	8001100 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2b0f      	cmp	r3, #15
 80010e6:	d80a      	bhi.n	80010fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010e8:	2200      	movs	r2, #0
 80010ea:	6879      	ldr	r1, [r7, #4]
 80010ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010f0:	f000 fd27 	bl	8001b42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010f4:	4a06      	ldr	r2, [pc, #24]	; (8001110 <HAL_InitTick+0x5c>)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010fa:	2300      	movs	r3, #0
 80010fc:	e000      	b.n	8001100 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
}
 8001100:	4618      	mov	r0, r3
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000000 	.word	0x20000000
 800110c:	20000008 	.word	0x20000008
 8001110:	20000004 	.word	0x20000004

08001114 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001118:	4b06      	ldr	r3, [pc, #24]	; (8001134 <HAL_IncTick+0x20>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	461a      	mov	r2, r3
 800111e:	4b06      	ldr	r3, [pc, #24]	; (8001138 <HAL_IncTick+0x24>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4413      	add	r3, r2
 8001124:	4a04      	ldr	r2, [pc, #16]	; (8001138 <HAL_IncTick+0x24>)
 8001126:	6013      	str	r3, [r2, #0]
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	20000008 	.word	0x20000008
 8001138:	20000200 	.word	0x20000200

0800113c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  return uwTick;
 8001140:	4b03      	ldr	r3, [pc, #12]	; (8001150 <HAL_GetTick+0x14>)
 8001142:	681b      	ldr	r3, [r3, #0]
}
 8001144:	4618      	mov	r0, r3
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	20000200 	.word	0x20000200

08001154 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800115c:	f7ff ffee 	bl	800113c <HAL_GetTick>
 8001160:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800116c:	d005      	beq.n	800117a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800116e:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <HAL_Delay+0x44>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	461a      	mov	r2, r3
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	4413      	add	r3, r2
 8001178:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800117a:	bf00      	nop
 800117c:	f7ff ffde 	bl	800113c <HAL_GetTick>
 8001180:	4602      	mov	r2, r0
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	68fa      	ldr	r2, [r7, #12]
 8001188:	429a      	cmp	r2, r3
 800118a:	d8f7      	bhi.n	800117c <HAL_Delay+0x28>
  {
  }
}
 800118c:	bf00      	nop
 800118e:	bf00      	nop
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000008 	.word	0x20000008

0800119c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011a4:	2300      	movs	r3, #0
 80011a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d101      	bne.n	80011b2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e033      	b.n	800121a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d109      	bne.n	80011ce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f7ff fdf4 	bl	8000da8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2200      	movs	r2, #0
 80011c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2200      	movs	r2, #0
 80011ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	f003 0310 	and.w	r3, r3, #16
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d118      	bne.n	800120c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80011e2:	f023 0302 	bic.w	r3, r3, #2
 80011e6:	f043 0202 	orr.w	r2, r3, #2
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f000 fa4e 	bl	8001690 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2200      	movs	r2, #0
 80011f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fe:	f023 0303 	bic.w	r3, r3, #3
 8001202:	f043 0201 	orr.w	r2, r3, #1
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	641a      	str	r2, [r3, #64]	; 0x40
 800120a:	e001      	b.n	8001210 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2200      	movs	r2, #0
 8001214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001218:	7bfb      	ldrb	r3, [r7, #15]
}
 800121a:	4618      	mov	r0, r3
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
	...

08001224 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001230:	2300      	movs	r3, #0
 8001232:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800123a:	2b01      	cmp	r3, #1
 800123c:	d101      	bne.n	8001242 <HAL_ADC_Start_DMA+0x1e>
 800123e:	2302      	movs	r3, #2
 8001240:	e0ce      	b.n	80013e0 <HAL_ADC_Start_DMA+0x1bc>
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	2201      	movs	r2, #1
 8001246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	f003 0301 	and.w	r3, r3, #1
 8001254:	2b01      	cmp	r3, #1
 8001256:	d018      	beq.n	800128a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	689a      	ldr	r2, [r3, #8]
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f042 0201 	orr.w	r2, r2, #1
 8001266:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001268:	4b5f      	ldr	r3, [pc, #380]	; (80013e8 <HAL_ADC_Start_DMA+0x1c4>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a5f      	ldr	r2, [pc, #380]	; (80013ec <HAL_ADC_Start_DMA+0x1c8>)
 800126e:	fba2 2303 	umull	r2, r3, r2, r3
 8001272:	0c9a      	lsrs	r2, r3, #18
 8001274:	4613      	mov	r3, r2
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	4413      	add	r3, r2
 800127a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800127c:	e002      	b.n	8001284 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	3b01      	subs	r3, #1
 8001282:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d1f9      	bne.n	800127e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001294:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001298:	d107      	bne.n	80012aa <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	689a      	ldr	r2, [r3, #8]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	f003 0301 	and.w	r3, r3, #1
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	f040 8086 	bne.w	80013c6 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80012c2:	f023 0301 	bic.w	r3, r3, #1
 80012c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d007      	beq.n	80012ec <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012e4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012f8:	d106      	bne.n	8001308 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fe:	f023 0206 	bic.w	r2, r3, #6
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	645a      	str	r2, [r3, #68]	; 0x44
 8001306:	e002      	b.n	800130e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	2200      	movs	r2, #0
 800130c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	2200      	movs	r2, #0
 8001312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001316:	4b36      	ldr	r3, [pc, #216]	; (80013f0 <HAL_ADC_Start_DMA+0x1cc>)
 8001318:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800131e:	4a35      	ldr	r2, [pc, #212]	; (80013f4 <HAL_ADC_Start_DMA+0x1d0>)
 8001320:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001326:	4a34      	ldr	r2, [pc, #208]	; (80013f8 <HAL_ADC_Start_DMA+0x1d4>)
 8001328:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800132e:	4a33      	ldr	r2, [pc, #204]	; (80013fc <HAL_ADC_Start_DMA+0x1d8>)
 8001330:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800133a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	685a      	ldr	r2, [r3, #4]
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800134a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	689a      	ldr	r2, [r3, #8]
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800135a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	334c      	adds	r3, #76	; 0x4c
 8001366:	4619      	mov	r1, r3
 8001368:	68ba      	ldr	r2, [r7, #8]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	f000 fcce 	bl	8001d0c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f003 031f 	and.w	r3, r3, #31
 8001378:	2b00      	cmp	r3, #0
 800137a:	d10f      	bne.n	800139c <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d129      	bne.n	80013de <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	689a      	ldr	r2, [r3, #8]
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001398:	609a      	str	r2, [r3, #8]
 800139a:	e020      	b.n	80013de <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a17      	ldr	r2, [pc, #92]	; (8001400 <HAL_ADC_Start_DMA+0x1dc>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d11b      	bne.n	80013de <HAL_ADC_Start_DMA+0x1ba>
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d114      	bne.n	80013de <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	689a      	ldr	r2, [r3, #8]
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	e00b      	b.n	80013de <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	f043 0210 	orr.w	r2, r3, #16
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d6:	f043 0201 	orr.w	r2, r3, #1
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80013de:	2300      	movs	r3, #0
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3718      	adds	r7, #24
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20000000 	.word	0x20000000
 80013ec:	431bde83 	.word	0x431bde83
 80013f0:	40012300 	.word	0x40012300
 80013f4:	08001889 	.word	0x08001889
 80013f8:	08001943 	.word	0x08001943
 80013fc:	0800195f 	.word	0x0800195f
 8001400:	40012000 	.word	0x40012000

08001404 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001420:	bf00      	nop
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001436:	2300      	movs	r3, #0
 8001438:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001440:	2b01      	cmp	r3, #1
 8001442:	d101      	bne.n	8001448 <HAL_ADC_ConfigChannel+0x1c>
 8001444:	2302      	movs	r3, #2
 8001446:	e113      	b.n	8001670 <HAL_ADC_ConfigChannel+0x244>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2201      	movs	r2, #1
 800144c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2b09      	cmp	r3, #9
 8001456:	d925      	bls.n	80014a4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	68d9      	ldr	r1, [r3, #12]
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	b29b      	uxth	r3, r3
 8001464:	461a      	mov	r2, r3
 8001466:	4613      	mov	r3, r2
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	4413      	add	r3, r2
 800146c:	3b1e      	subs	r3, #30
 800146e:	2207      	movs	r2, #7
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	43da      	mvns	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	400a      	ands	r2, r1
 800147c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	68d9      	ldr	r1, [r3, #12]
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	689a      	ldr	r2, [r3, #8]
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	b29b      	uxth	r3, r3
 800148e:	4618      	mov	r0, r3
 8001490:	4603      	mov	r3, r0
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	4403      	add	r3, r0
 8001496:	3b1e      	subs	r3, #30
 8001498:	409a      	lsls	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	430a      	orrs	r2, r1
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	e022      	b.n	80014ea <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	6919      	ldr	r1, [r3, #16]
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	461a      	mov	r2, r3
 80014b2:	4613      	mov	r3, r2
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	4413      	add	r3, r2
 80014b8:	2207      	movs	r2, #7
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	43da      	mvns	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	400a      	ands	r2, r1
 80014c6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	6919      	ldr	r1, [r3, #16]
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	689a      	ldr	r2, [r3, #8]
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	4618      	mov	r0, r3
 80014da:	4603      	mov	r3, r0
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	4403      	add	r3, r0
 80014e0:	409a      	lsls	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	430a      	orrs	r2, r1
 80014e8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	2b06      	cmp	r3, #6
 80014f0:	d824      	bhi.n	800153c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685a      	ldr	r2, [r3, #4]
 80014fc:	4613      	mov	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	4413      	add	r3, r2
 8001502:	3b05      	subs	r3, #5
 8001504:	221f      	movs	r2, #31
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	43da      	mvns	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	400a      	ands	r2, r1
 8001512:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	b29b      	uxth	r3, r3
 8001520:	4618      	mov	r0, r3
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685a      	ldr	r2, [r3, #4]
 8001526:	4613      	mov	r3, r2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	4413      	add	r3, r2
 800152c:	3b05      	subs	r3, #5
 800152e:	fa00 f203 	lsl.w	r2, r0, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	430a      	orrs	r2, r1
 8001538:	635a      	str	r2, [r3, #52]	; 0x34
 800153a:	e04c      	b.n	80015d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	2b0c      	cmp	r3, #12
 8001542:	d824      	bhi.n	800158e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685a      	ldr	r2, [r3, #4]
 800154e:	4613      	mov	r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	4413      	add	r3, r2
 8001554:	3b23      	subs	r3, #35	; 0x23
 8001556:	221f      	movs	r2, #31
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	43da      	mvns	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	400a      	ands	r2, r1
 8001564:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	b29b      	uxth	r3, r3
 8001572:	4618      	mov	r0, r3
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685a      	ldr	r2, [r3, #4]
 8001578:	4613      	mov	r3, r2
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	4413      	add	r3, r2
 800157e:	3b23      	subs	r3, #35	; 0x23
 8001580:	fa00 f203 	lsl.w	r2, r0, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	430a      	orrs	r2, r1
 800158a:	631a      	str	r2, [r3, #48]	; 0x30
 800158c:	e023      	b.n	80015d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685a      	ldr	r2, [r3, #4]
 8001598:	4613      	mov	r3, r2
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	4413      	add	r3, r2
 800159e:	3b41      	subs	r3, #65	; 0x41
 80015a0:	221f      	movs	r2, #31
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	43da      	mvns	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	400a      	ands	r2, r1
 80015ae:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	4618      	mov	r0, r3
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685a      	ldr	r2, [r3, #4]
 80015c2:	4613      	mov	r3, r2
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	4413      	add	r3, r2
 80015c8:	3b41      	subs	r3, #65	; 0x41
 80015ca:	fa00 f203 	lsl.w	r2, r0, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	430a      	orrs	r2, r1
 80015d4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015d6:	4b29      	ldr	r3, [pc, #164]	; (800167c <HAL_ADC_ConfigChannel+0x250>)
 80015d8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a28      	ldr	r2, [pc, #160]	; (8001680 <HAL_ADC_ConfigChannel+0x254>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d10f      	bne.n	8001604 <HAL_ADC_ConfigChannel+0x1d8>
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2b12      	cmp	r3, #18
 80015ea:	d10b      	bne.n	8001604 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a1d      	ldr	r2, [pc, #116]	; (8001680 <HAL_ADC_ConfigChannel+0x254>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d12b      	bne.n	8001666 <HAL_ADC_ConfigChannel+0x23a>
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a1c      	ldr	r2, [pc, #112]	; (8001684 <HAL_ADC_ConfigChannel+0x258>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d003      	beq.n	8001620 <HAL_ADC_ConfigChannel+0x1f4>
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2b11      	cmp	r3, #17
 800161e:	d122      	bne.n	8001666 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a11      	ldr	r2, [pc, #68]	; (8001684 <HAL_ADC_ConfigChannel+0x258>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d111      	bne.n	8001666 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001642:	4b11      	ldr	r3, [pc, #68]	; (8001688 <HAL_ADC_ConfigChannel+0x25c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a11      	ldr	r2, [pc, #68]	; (800168c <HAL_ADC_ConfigChannel+0x260>)
 8001648:	fba2 2303 	umull	r2, r3, r2, r3
 800164c:	0c9a      	lsrs	r2, r3, #18
 800164e:	4613      	mov	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	4413      	add	r3, r2
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001658:	e002      	b.n	8001660 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	3b01      	subs	r3, #1
 800165e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1f9      	bne.n	800165a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2200      	movs	r2, #0
 800166a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800166e:	2300      	movs	r3, #0
}
 8001670:	4618      	mov	r0, r3
 8001672:	3714      	adds	r7, #20
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	40012300 	.word	0x40012300
 8001680:	40012000 	.word	0x40012000
 8001684:	10000012 	.word	0x10000012
 8001688:	20000000 	.word	0x20000000
 800168c:	431bde83 	.word	0x431bde83

08001690 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001690:	b480      	push	{r7}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001698:	4b79      	ldr	r3, [pc, #484]	; (8001880 <ADC_Init+0x1f0>)
 800169a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	685a      	ldr	r2, [r3, #4]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	431a      	orrs	r2, r3
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	685a      	ldr	r2, [r3, #4]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	6859      	ldr	r1, [r3, #4]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	691b      	ldr	r3, [r3, #16]
 80016d0:	021a      	lsls	r2, r3, #8
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	430a      	orrs	r2, r1
 80016d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	685a      	ldr	r2, [r3, #4]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80016e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	6859      	ldr	r1, [r3, #4]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689a      	ldr	r2, [r3, #8]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	430a      	orrs	r2, r1
 80016fa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	689a      	ldr	r2, [r3, #8]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800170a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	6899      	ldr	r1, [r3, #8]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	68da      	ldr	r2, [r3, #12]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	430a      	orrs	r2, r1
 800171c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001722:	4a58      	ldr	r2, [pc, #352]	; (8001884 <ADC_Init+0x1f4>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d022      	beq.n	800176e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	689a      	ldr	r2, [r3, #8]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001736:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	6899      	ldr	r1, [r3, #8]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	430a      	orrs	r2, r1
 8001748:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	689a      	ldr	r2, [r3, #8]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001758:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	6899      	ldr	r1, [r3, #8]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	430a      	orrs	r2, r1
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	e00f      	b.n	800178e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	689a      	ldr	r2, [r3, #8]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800177c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	689a      	ldr	r2, [r3, #8]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800178c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	689a      	ldr	r2, [r3, #8]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f022 0202 	bic.w	r2, r2, #2
 800179c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	6899      	ldr	r1, [r3, #8]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	7e1b      	ldrb	r3, [r3, #24]
 80017a8:	005a      	lsls	r2, r3, #1
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	430a      	orrs	r2, r1
 80017b0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d01b      	beq.n	80017f4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	685a      	ldr	r2, [r3, #4]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80017ca:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	685a      	ldr	r2, [r3, #4]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80017da:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	6859      	ldr	r1, [r3, #4]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e6:	3b01      	subs	r3, #1
 80017e8:	035a      	lsls	r2, r3, #13
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	430a      	orrs	r2, r1
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	e007      	b.n	8001804 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	685a      	ldr	r2, [r3, #4]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001802:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001812:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	69db      	ldr	r3, [r3, #28]
 800181e:	3b01      	subs	r3, #1
 8001820:	051a      	lsls	r2, r3, #20
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	430a      	orrs	r2, r1
 8001828:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	689a      	ldr	r2, [r3, #8]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001838:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	6899      	ldr	r1, [r3, #8]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001846:	025a      	lsls	r2, r3, #9
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	430a      	orrs	r2, r1
 800184e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	689a      	ldr	r2, [r3, #8]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800185e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6899      	ldr	r1, [r3, #8]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	695b      	ldr	r3, [r3, #20]
 800186a:	029a      	lsls	r2, r3, #10
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	430a      	orrs	r2, r1
 8001872:	609a      	str	r2, [r3, #8]
}
 8001874:	bf00      	nop
 8001876:	3714      	adds	r7, #20
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	40012300 	.word	0x40012300
 8001884:	0f000001 	.word	0x0f000001

08001888 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001894:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d13c      	bne.n	800191c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d12b      	bne.n	8001914 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d127      	bne.n	8001914 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ca:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d006      	beq.n	80018e0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d119      	bne.n	8001914 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	685a      	ldr	r2, [r3, #4]
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f022 0220 	bic.w	r2, r2, #32
 80018ee:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001900:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d105      	bne.n	8001914 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190c:	f043 0201 	orr.w	r2, r3, #1
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001914:	68f8      	ldr	r0, [r7, #12]
 8001916:	f7fe fff7 	bl	8000908 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800191a:	e00e      	b.n	800193a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001920:	f003 0310 	and.w	r3, r3, #16
 8001924:	2b00      	cmp	r3, #0
 8001926:	d003      	beq.n	8001930 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001928:	68f8      	ldr	r0, [r7, #12]
 800192a:	f7ff fd75 	bl	8001418 <HAL_ADC_ErrorCallback>
}
 800192e:	e004      	b.n	800193a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	4798      	blx	r3
}
 800193a:	bf00      	nop
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001942:	b580      	push	{r7, lr}
 8001944:	b084      	sub	sp, #16
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800194e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001950:	68f8      	ldr	r0, [r7, #12]
 8001952:	f7ff fd57 	bl	8001404 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001956:	bf00      	nop
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b084      	sub	sp, #16
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800196a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2240      	movs	r2, #64	; 0x40
 8001970:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001976:	f043 0204 	orr.w	r2, r3, #4
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800197e:	68f8      	ldr	r0, [r7, #12]
 8001980:	f7ff fd4a 	bl	8001418 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001984:	bf00      	nop
 8001986:	3710      	adds	r7, #16
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f003 0307 	and.w	r3, r3, #7
 800199a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800199c:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <__NVIC_SetPriorityGrouping+0x44>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019a2:	68ba      	ldr	r2, [r7, #8]
 80019a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019a8:	4013      	ands	r3, r2
 80019aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019be:	4a04      	ldr	r2, [pc, #16]	; (80019d0 <__NVIC_SetPriorityGrouping+0x44>)
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	60d3      	str	r3, [r2, #12]
}
 80019c4:	bf00      	nop
 80019c6:	3714      	adds	r7, #20
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	e000ed00 	.word	0xe000ed00

080019d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019d8:	4b04      	ldr	r3, [pc, #16]	; (80019ec <__NVIC_GetPriorityGrouping+0x18>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	0a1b      	lsrs	r3, r3, #8
 80019de:	f003 0307 	and.w	r3, r3, #7
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	e000ed00 	.word	0xe000ed00

080019f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	4603      	mov	r3, r0
 80019f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	db0b      	blt.n	8001a1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a02:	79fb      	ldrb	r3, [r7, #7]
 8001a04:	f003 021f 	and.w	r2, r3, #31
 8001a08:	4907      	ldr	r1, [pc, #28]	; (8001a28 <__NVIC_EnableIRQ+0x38>)
 8001a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0e:	095b      	lsrs	r3, r3, #5
 8001a10:	2001      	movs	r0, #1
 8001a12:	fa00 f202 	lsl.w	r2, r0, r2
 8001a16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	e000e100 	.word	0xe000e100

08001a2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	6039      	str	r1, [r7, #0]
 8001a36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	db0a      	blt.n	8001a56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	490c      	ldr	r1, [pc, #48]	; (8001a78 <__NVIC_SetPriority+0x4c>)
 8001a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4a:	0112      	lsls	r2, r2, #4
 8001a4c:	b2d2      	uxtb	r2, r2
 8001a4e:	440b      	add	r3, r1
 8001a50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a54:	e00a      	b.n	8001a6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	b2da      	uxtb	r2, r3
 8001a5a:	4908      	ldr	r1, [pc, #32]	; (8001a7c <__NVIC_SetPriority+0x50>)
 8001a5c:	79fb      	ldrb	r3, [r7, #7]
 8001a5e:	f003 030f 	and.w	r3, r3, #15
 8001a62:	3b04      	subs	r3, #4
 8001a64:	0112      	lsls	r2, r2, #4
 8001a66:	b2d2      	uxtb	r2, r2
 8001a68:	440b      	add	r3, r1
 8001a6a:	761a      	strb	r2, [r3, #24]
}
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	e000e100 	.word	0xe000e100
 8001a7c:	e000ed00 	.word	0xe000ed00

08001a80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b089      	sub	sp, #36	; 0x24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	f1c3 0307 	rsb	r3, r3, #7
 8001a9a:	2b04      	cmp	r3, #4
 8001a9c:	bf28      	it	cs
 8001a9e:	2304      	movcs	r3, #4
 8001aa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	3304      	adds	r3, #4
 8001aa6:	2b06      	cmp	r3, #6
 8001aa8:	d902      	bls.n	8001ab0 <NVIC_EncodePriority+0x30>
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	3b03      	subs	r3, #3
 8001aae:	e000      	b.n	8001ab2 <NVIC_EncodePriority+0x32>
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	43da      	mvns	r2, r3
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	401a      	ands	r2, r3
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ac8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad2:	43d9      	mvns	r1, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad8:	4313      	orrs	r3, r2
         );
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3724      	adds	r7, #36	; 0x24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
	...

08001ae8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	3b01      	subs	r3, #1
 8001af4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001af8:	d301      	bcc.n	8001afe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001afa:	2301      	movs	r3, #1
 8001afc:	e00f      	b.n	8001b1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001afe:	4a0a      	ldr	r2, [pc, #40]	; (8001b28 <SysTick_Config+0x40>)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	3b01      	subs	r3, #1
 8001b04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b06:	210f      	movs	r1, #15
 8001b08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b0c:	f7ff ff8e 	bl	8001a2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b10:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <SysTick_Config+0x40>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b16:	4b04      	ldr	r3, [pc, #16]	; (8001b28 <SysTick_Config+0x40>)
 8001b18:	2207      	movs	r2, #7
 8001b1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	e000e010 	.word	0xe000e010

08001b2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f7ff ff29 	bl	800198c <__NVIC_SetPriorityGrouping>
}
 8001b3a:	bf00      	nop
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b086      	sub	sp, #24
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	4603      	mov	r3, r0
 8001b4a:	60b9      	str	r1, [r7, #8]
 8001b4c:	607a      	str	r2, [r7, #4]
 8001b4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b50:	2300      	movs	r3, #0
 8001b52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b54:	f7ff ff3e 	bl	80019d4 <__NVIC_GetPriorityGrouping>
 8001b58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	68b9      	ldr	r1, [r7, #8]
 8001b5e:	6978      	ldr	r0, [r7, #20]
 8001b60:	f7ff ff8e 	bl	8001a80 <NVIC_EncodePriority>
 8001b64:	4602      	mov	r2, r0
 8001b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b6a:	4611      	mov	r1, r2
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff ff5d 	bl	8001a2c <__NVIC_SetPriority>
}
 8001b72:	bf00      	nop
 8001b74:	3718      	adds	r7, #24
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b082      	sub	sp, #8
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	4603      	mov	r3, r0
 8001b82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff ff31 	bl	80019f0 <__NVIC_EnableIRQ>
}
 8001b8e:	bf00      	nop
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b082      	sub	sp, #8
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f7ff ffa2 	bl	8001ae8 <SysTick_Config>
 8001ba4:	4603      	mov	r3, r0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
	...

08001bb0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001bbc:	f7ff fabe 	bl	800113c <HAL_GetTick>
 8001bc0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d101      	bne.n	8001bcc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e099      	b.n	8001d00 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2202      	movs	r2, #2
 8001bd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f022 0201 	bic.w	r2, r2, #1
 8001bea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bec:	e00f      	b.n	8001c0e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bee:	f7ff faa5 	bl	800113c <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	2b05      	cmp	r3, #5
 8001bfa:	d908      	bls.n	8001c0e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2220      	movs	r2, #32
 8001c00:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2203      	movs	r2, #3
 8001c06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e078      	b.n	8001d00 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0301 	and.w	r3, r3, #1
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1e8      	bne.n	8001bee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c24:	697a      	ldr	r2, [r7, #20]
 8001c26:	4b38      	ldr	r3, [pc, #224]	; (8001d08 <HAL_DMA_Init+0x158>)
 8001c28:	4013      	ands	r3, r2
 8001c2a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685a      	ldr	r2, [r3, #4]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6a1b      	ldr	r3, [r3, #32]
 8001c58:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c5a:	697a      	ldr	r2, [r7, #20]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c64:	2b04      	cmp	r3, #4
 8001c66:	d107      	bne.n	8001c78 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c70:	4313      	orrs	r3, r2
 8001c72:	697a      	ldr	r2, [r7, #20]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	697a      	ldr	r2, [r7, #20]
 8001c7e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	695b      	ldr	r3, [r3, #20]
 8001c86:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	f023 0307 	bic.w	r3, r3, #7
 8001c8e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c94:	697a      	ldr	r2, [r7, #20]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9e:	2b04      	cmp	r3, #4
 8001ca0:	d117      	bne.n	8001cd2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca6:	697a      	ldr	r2, [r7, #20]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d00e      	beq.n	8001cd2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f000 fa6f 	bl	8002198 <DMA_CheckFifoParam>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d008      	beq.n	8001cd2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2240      	movs	r2, #64	; 0x40
 8001cc4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e016      	b.n	8001d00 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	697a      	ldr	r2, [r7, #20]
 8001cd8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 fa26 	bl	800212c <DMA_CalcBaseAndBitshift>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce8:	223f      	movs	r2, #63	; 0x3f
 8001cea:	409a      	lsls	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001cfe:	2300      	movs	r3, #0
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3718      	adds	r7, #24
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	f010803f 	.word	0xf010803f

08001d0c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
 8001d18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d22:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d101      	bne.n	8001d32 <HAL_DMA_Start_IT+0x26>
 8001d2e:	2302      	movs	r3, #2
 8001d30:	e040      	b.n	8001db4 <HAL_DMA_Start_IT+0xa8>
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2201      	movs	r2, #1
 8001d36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d12f      	bne.n	8001da6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2202      	movs	r2, #2
 8001d4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2200      	movs	r2, #0
 8001d52:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	68b9      	ldr	r1, [r7, #8]
 8001d5a:	68f8      	ldr	r0, [r7, #12]
 8001d5c:	f000 f9b8 	bl	80020d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d64:	223f      	movs	r2, #63	; 0x3f
 8001d66:	409a      	lsls	r2, r3
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f042 0216 	orr.w	r2, r2, #22
 8001d7a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d007      	beq.n	8001d94 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f042 0208 	orr.w	r2, r2, #8
 8001d92:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f042 0201 	orr.w	r2, r2, #1
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	e005      	b.n	8001db2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001dae:	2302      	movs	r3, #2
 8001db0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001db2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3718      	adds	r7, #24
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001dc8:	4b92      	ldr	r3, [pc, #584]	; (8002014 <HAL_DMA_IRQHandler+0x258>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a92      	ldr	r2, [pc, #584]	; (8002018 <HAL_DMA_IRQHandler+0x25c>)
 8001dce:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd2:	0a9b      	lsrs	r3, r3, #10
 8001dd4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dda:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de6:	2208      	movs	r2, #8
 8001de8:	409a      	lsls	r2, r3
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	4013      	ands	r3, r2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d01a      	beq.n	8001e28 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0304 	and.w	r3, r3, #4
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d013      	beq.n	8001e28 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f022 0204 	bic.w	r2, r2, #4
 8001e0e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e14:	2208      	movs	r2, #8
 8001e16:	409a      	lsls	r2, r3
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e20:	f043 0201 	orr.w	r2, r3, #1
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	409a      	lsls	r2, r3
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	4013      	ands	r3, r2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d012      	beq.n	8001e5e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	695b      	ldr	r3, [r3, #20]
 8001e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d00b      	beq.n	8001e5e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	409a      	lsls	r2, r3
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e56:	f043 0202 	orr.w	r2, r3, #2
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e62:	2204      	movs	r2, #4
 8001e64:	409a      	lsls	r2, r3
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d012      	beq.n	8001e94 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d00b      	beq.n	8001e94 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e80:	2204      	movs	r2, #4
 8001e82:	409a      	lsls	r2, r3
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e8c:	f043 0204 	orr.w	r2, r3, #4
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e98:	2210      	movs	r2, #16
 8001e9a:	409a      	lsls	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d043      	beq.n	8001f2c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0308 	and.w	r3, r3, #8
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d03c      	beq.n	8001f2c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eb6:	2210      	movs	r2, #16
 8001eb8:	409a      	lsls	r2, r3
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d018      	beq.n	8001efe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d108      	bne.n	8001eec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d024      	beq.n	8001f2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	4798      	blx	r3
 8001eea:	e01f      	b.n	8001f2c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d01b      	beq.n	8001f2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	4798      	blx	r3
 8001efc:	e016      	b.n	8001f2c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d107      	bne.n	8001f1c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f022 0208 	bic.w	r2, r2, #8
 8001f1a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d003      	beq.n	8001f2c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f30:	2220      	movs	r2, #32
 8001f32:	409a      	lsls	r2, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	4013      	ands	r3, r2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	f000 808e 	beq.w	800205a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0310 	and.w	r3, r3, #16
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f000 8086 	beq.w	800205a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f52:	2220      	movs	r2, #32
 8001f54:	409a      	lsls	r2, r3
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b05      	cmp	r3, #5
 8001f64:	d136      	bne.n	8001fd4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f022 0216 	bic.w	r2, r2, #22
 8001f74:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	695a      	ldr	r2, [r3, #20]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f84:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d103      	bne.n	8001f96 <HAL_DMA_IRQHandler+0x1da>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d007      	beq.n	8001fa6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f022 0208 	bic.w	r2, r2, #8
 8001fa4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001faa:	223f      	movs	r2, #63	; 0x3f
 8001fac:	409a      	lsls	r2, r3
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d07d      	beq.n	80020c6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	4798      	blx	r3
        }
        return;
 8001fd2:	e078      	b.n	80020c6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d01c      	beq.n	800201c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d108      	bne.n	8002002 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d030      	beq.n	800205a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	4798      	blx	r3
 8002000:	e02b      	b.n	800205a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002006:	2b00      	cmp	r3, #0
 8002008:	d027      	beq.n	800205a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	4798      	blx	r3
 8002012:	e022      	b.n	800205a <HAL_DMA_IRQHandler+0x29e>
 8002014:	20000000 	.word	0x20000000
 8002018:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002026:	2b00      	cmp	r3, #0
 8002028:	d10f      	bne.n	800204a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f022 0210 	bic.w	r2, r2, #16
 8002038:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2201      	movs	r2, #1
 800203e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800204e:	2b00      	cmp	r3, #0
 8002050:	d003      	beq.n	800205a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800205e:	2b00      	cmp	r3, #0
 8002060:	d032      	beq.n	80020c8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	2b00      	cmp	r3, #0
 800206c:	d022      	beq.n	80020b4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2205      	movs	r2, #5
 8002072:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f022 0201 	bic.w	r2, r2, #1
 8002084:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	3301      	adds	r3, #1
 800208a:	60bb      	str	r3, [r7, #8]
 800208c:	697a      	ldr	r2, [r7, #20]
 800208e:	429a      	cmp	r2, r3
 8002090:	d307      	bcc.n	80020a2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0301 	and.w	r3, r3, #1
 800209c:	2b00      	cmp	r3, #0
 800209e:	d1f2      	bne.n	8002086 <HAL_DMA_IRQHandler+0x2ca>
 80020a0:	e000      	b.n	80020a4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80020a2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2201      	movs	r2, #1
 80020a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d005      	beq.n	80020c8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	4798      	blx	r3
 80020c4:	e000      	b.n	80020c8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80020c6:	bf00      	nop
    }
  }
}
 80020c8:	3718      	adds	r7, #24
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop

080020d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
 80020dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80020ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	2b40      	cmp	r3, #64	; 0x40
 80020fc:	d108      	bne.n	8002110 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68ba      	ldr	r2, [r7, #8]
 800210c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800210e:	e007      	b.n	8002120 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	68ba      	ldr	r2, [r7, #8]
 8002116:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	60da      	str	r2, [r3, #12]
}
 8002120:	bf00      	nop
 8002122:	3714      	adds	r7, #20
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	b2db      	uxtb	r3, r3
 800213a:	3b10      	subs	r3, #16
 800213c:	4a14      	ldr	r2, [pc, #80]	; (8002190 <DMA_CalcBaseAndBitshift+0x64>)
 800213e:	fba2 2303 	umull	r2, r3, r2, r3
 8002142:	091b      	lsrs	r3, r3, #4
 8002144:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002146:	4a13      	ldr	r2, [pc, #76]	; (8002194 <DMA_CalcBaseAndBitshift+0x68>)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	4413      	add	r3, r2
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	461a      	mov	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2b03      	cmp	r3, #3
 8002158:	d909      	bls.n	800216e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002162:	f023 0303 	bic.w	r3, r3, #3
 8002166:	1d1a      	adds	r2, r3, #4
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	659a      	str	r2, [r3, #88]	; 0x58
 800216c:	e007      	b.n	800217e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002176:	f023 0303 	bic.w	r3, r3, #3
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002182:	4618      	mov	r0, r3
 8002184:	3714      	adds	r7, #20
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	aaaaaaab 	.word	0xaaaaaaab
 8002194:	08003e28 	.word	0x08003e28

08002198 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021a0:	2300      	movs	r3, #0
 80021a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d11f      	bne.n	80021f2 <DMA_CheckFifoParam+0x5a>
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	2b03      	cmp	r3, #3
 80021b6:	d856      	bhi.n	8002266 <DMA_CheckFifoParam+0xce>
 80021b8:	a201      	add	r2, pc, #4	; (adr r2, 80021c0 <DMA_CheckFifoParam+0x28>)
 80021ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021be:	bf00      	nop
 80021c0:	080021d1 	.word	0x080021d1
 80021c4:	080021e3 	.word	0x080021e3
 80021c8:	080021d1 	.word	0x080021d1
 80021cc:	08002267 	.word	0x08002267
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d046      	beq.n	800226a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021e0:	e043      	b.n	800226a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021ea:	d140      	bne.n	800226e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021f0:	e03d      	b.n	800226e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021fa:	d121      	bne.n	8002240 <DMA_CheckFifoParam+0xa8>
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	2b03      	cmp	r3, #3
 8002200:	d837      	bhi.n	8002272 <DMA_CheckFifoParam+0xda>
 8002202:	a201      	add	r2, pc, #4	; (adr r2, 8002208 <DMA_CheckFifoParam+0x70>)
 8002204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002208:	08002219 	.word	0x08002219
 800220c:	0800221f 	.word	0x0800221f
 8002210:	08002219 	.word	0x08002219
 8002214:	08002231 	.word	0x08002231
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	73fb      	strb	r3, [r7, #15]
      break;
 800221c:	e030      	b.n	8002280 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002222:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d025      	beq.n	8002276 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800222e:	e022      	b.n	8002276 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002234:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002238:	d11f      	bne.n	800227a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800223e:	e01c      	b.n	800227a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	2b02      	cmp	r3, #2
 8002244:	d903      	bls.n	800224e <DMA_CheckFifoParam+0xb6>
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	2b03      	cmp	r3, #3
 800224a:	d003      	beq.n	8002254 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800224c:	e018      	b.n	8002280 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	73fb      	strb	r3, [r7, #15]
      break;
 8002252:	e015      	b.n	8002280 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002258:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d00e      	beq.n	800227e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	73fb      	strb	r3, [r7, #15]
      break;
 8002264:	e00b      	b.n	800227e <DMA_CheckFifoParam+0xe6>
      break;
 8002266:	bf00      	nop
 8002268:	e00a      	b.n	8002280 <DMA_CheckFifoParam+0xe8>
      break;
 800226a:	bf00      	nop
 800226c:	e008      	b.n	8002280 <DMA_CheckFifoParam+0xe8>
      break;
 800226e:	bf00      	nop
 8002270:	e006      	b.n	8002280 <DMA_CheckFifoParam+0xe8>
      break;
 8002272:	bf00      	nop
 8002274:	e004      	b.n	8002280 <DMA_CheckFifoParam+0xe8>
      break;
 8002276:	bf00      	nop
 8002278:	e002      	b.n	8002280 <DMA_CheckFifoParam+0xe8>
      break;   
 800227a:	bf00      	nop
 800227c:	e000      	b.n	8002280 <DMA_CheckFifoParam+0xe8>
      break;
 800227e:	bf00      	nop
    }
  } 
  
  return status; 
 8002280:	7bfb      	ldrb	r3, [r7, #15]
}
 8002282:	4618      	mov	r0, r3
 8002284:	3714      	adds	r7, #20
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop

08002290 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002290:	b480      	push	{r7}
 8002292:	b089      	sub	sp, #36	; 0x24
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800229a:	2300      	movs	r3, #0
 800229c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800229e:	2300      	movs	r3, #0
 80022a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022a2:	2300      	movs	r3, #0
 80022a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022a6:	2300      	movs	r3, #0
 80022a8:	61fb      	str	r3, [r7, #28]
 80022aa:	e159      	b.n	8002560 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022ac:	2201      	movs	r2, #1
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	697a      	ldr	r2, [r7, #20]
 80022bc:	4013      	ands	r3, r2
 80022be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	f040 8148 	bne.w	800255a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f003 0303 	and.w	r3, r3, #3
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d005      	beq.n	80022e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d130      	bne.n	8002344 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	2203      	movs	r2, #3
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	43db      	mvns	r3, r3
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	4013      	ands	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	68da      	ldr	r2, [r3, #12]
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	4313      	orrs	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002318:	2201      	movs	r2, #1
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	43db      	mvns	r3, r3
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4013      	ands	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	091b      	lsrs	r3, r3, #4
 800232e:	f003 0201 	and.w	r2, r3, #1
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	4313      	orrs	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f003 0303 	and.w	r3, r3, #3
 800234c:	2b03      	cmp	r3, #3
 800234e:	d017      	beq.n	8002380 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	2203      	movs	r2, #3
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	43db      	mvns	r3, r3
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	4013      	ands	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	689a      	ldr	r2, [r3, #8]
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	4313      	orrs	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f003 0303 	and.w	r3, r3, #3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d123      	bne.n	80023d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	08da      	lsrs	r2, r3, #3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	3208      	adds	r2, #8
 8002394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002398:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	f003 0307 	and.w	r3, r3, #7
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	220f      	movs	r2, #15
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	43db      	mvns	r3, r3
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	4013      	ands	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	691a      	ldr	r2, [r3, #16]
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	f003 0307 	and.w	r3, r3, #7
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	08da      	lsrs	r2, r3, #3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	3208      	adds	r2, #8
 80023ce:	69b9      	ldr	r1, [r7, #24]
 80023d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	2203      	movs	r2, #3
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	43db      	mvns	r3, r3
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	4013      	ands	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f003 0203 	and.w	r2, r3, #3
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	4313      	orrs	r3, r2
 8002400:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002410:	2b00      	cmp	r3, #0
 8002412:	f000 80a2 	beq.w	800255a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002416:	2300      	movs	r3, #0
 8002418:	60fb      	str	r3, [r7, #12]
 800241a:	4b57      	ldr	r3, [pc, #348]	; (8002578 <HAL_GPIO_Init+0x2e8>)
 800241c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241e:	4a56      	ldr	r2, [pc, #344]	; (8002578 <HAL_GPIO_Init+0x2e8>)
 8002420:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002424:	6453      	str	r3, [r2, #68]	; 0x44
 8002426:	4b54      	ldr	r3, [pc, #336]	; (8002578 <HAL_GPIO_Init+0x2e8>)
 8002428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002432:	4a52      	ldr	r2, [pc, #328]	; (800257c <HAL_GPIO_Init+0x2ec>)
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	089b      	lsrs	r3, r3, #2
 8002438:	3302      	adds	r3, #2
 800243a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800243e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	f003 0303 	and.w	r3, r3, #3
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	220f      	movs	r2, #15
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	43db      	mvns	r3, r3
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	4013      	ands	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a49      	ldr	r2, [pc, #292]	; (8002580 <HAL_GPIO_Init+0x2f0>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d019      	beq.n	8002492 <HAL_GPIO_Init+0x202>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a48      	ldr	r2, [pc, #288]	; (8002584 <HAL_GPIO_Init+0x2f4>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d013      	beq.n	800248e <HAL_GPIO_Init+0x1fe>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a47      	ldr	r2, [pc, #284]	; (8002588 <HAL_GPIO_Init+0x2f8>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d00d      	beq.n	800248a <HAL_GPIO_Init+0x1fa>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a46      	ldr	r2, [pc, #280]	; (800258c <HAL_GPIO_Init+0x2fc>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d007      	beq.n	8002486 <HAL_GPIO_Init+0x1f6>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a45      	ldr	r2, [pc, #276]	; (8002590 <HAL_GPIO_Init+0x300>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d101      	bne.n	8002482 <HAL_GPIO_Init+0x1f2>
 800247e:	2304      	movs	r3, #4
 8002480:	e008      	b.n	8002494 <HAL_GPIO_Init+0x204>
 8002482:	2307      	movs	r3, #7
 8002484:	e006      	b.n	8002494 <HAL_GPIO_Init+0x204>
 8002486:	2303      	movs	r3, #3
 8002488:	e004      	b.n	8002494 <HAL_GPIO_Init+0x204>
 800248a:	2302      	movs	r3, #2
 800248c:	e002      	b.n	8002494 <HAL_GPIO_Init+0x204>
 800248e:	2301      	movs	r3, #1
 8002490:	e000      	b.n	8002494 <HAL_GPIO_Init+0x204>
 8002492:	2300      	movs	r3, #0
 8002494:	69fa      	ldr	r2, [r7, #28]
 8002496:	f002 0203 	and.w	r2, r2, #3
 800249a:	0092      	lsls	r2, r2, #2
 800249c:	4093      	lsls	r3, r2
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024a4:	4935      	ldr	r1, [pc, #212]	; (800257c <HAL_GPIO_Init+0x2ec>)
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	089b      	lsrs	r3, r3, #2
 80024aa:	3302      	adds	r3, #2
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024b2:	4b38      	ldr	r3, [pc, #224]	; (8002594 <HAL_GPIO_Init+0x304>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	43db      	mvns	r3, r3
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	4013      	ands	r3, r2
 80024c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d003      	beq.n	80024d6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024d6:	4a2f      	ldr	r2, [pc, #188]	; (8002594 <HAL_GPIO_Init+0x304>)
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80024dc:	4b2d      	ldr	r3, [pc, #180]	; (8002594 <HAL_GPIO_Init+0x304>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	43db      	mvns	r3, r3
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	4013      	ands	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d003      	beq.n	8002500 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002500:	4a24      	ldr	r2, [pc, #144]	; (8002594 <HAL_GPIO_Init+0x304>)
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002506:	4b23      	ldr	r3, [pc, #140]	; (8002594 <HAL_GPIO_Init+0x304>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	43db      	mvns	r3, r3
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	4013      	ands	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d003      	beq.n	800252a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	4313      	orrs	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800252a:	4a1a      	ldr	r2, [pc, #104]	; (8002594 <HAL_GPIO_Init+0x304>)
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002530:	4b18      	ldr	r3, [pc, #96]	; (8002594 <HAL_GPIO_Init+0x304>)
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	43db      	mvns	r3, r3
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	4013      	ands	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d003      	beq.n	8002554 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	4313      	orrs	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002554:	4a0f      	ldr	r2, [pc, #60]	; (8002594 <HAL_GPIO_Init+0x304>)
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	3301      	adds	r3, #1
 800255e:	61fb      	str	r3, [r7, #28]
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	2b0f      	cmp	r3, #15
 8002564:	f67f aea2 	bls.w	80022ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002568:	bf00      	nop
 800256a:	bf00      	nop
 800256c:	3724      	adds	r7, #36	; 0x24
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	40023800 	.word	0x40023800
 800257c:	40013800 	.word	0x40013800
 8002580:	40020000 	.word	0x40020000
 8002584:	40020400 	.word	0x40020400
 8002588:	40020800 	.word	0x40020800
 800258c:	40020c00 	.word	0x40020c00
 8002590:	40021000 	.word	0x40021000
 8002594:	40013c00 	.word	0x40013c00

08002598 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	460b      	mov	r3, r1
 80025a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	691a      	ldr	r2, [r3, #16]
 80025a8:	887b      	ldrh	r3, [r7, #2]
 80025aa:	4013      	ands	r3, r2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d002      	beq.n	80025b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025b0:	2301      	movs	r3, #1
 80025b2:	73fb      	strb	r3, [r7, #15]
 80025b4:	e001      	b.n	80025ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025b6:	2300      	movs	r3, #0
 80025b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3714      	adds	r7, #20
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	460b      	mov	r3, r1
 80025d2:	807b      	strh	r3, [r7, #2]
 80025d4:	4613      	mov	r3, r2
 80025d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025d8:	787b      	ldrb	r3, [r7, #1]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d003      	beq.n	80025e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025de:	887a      	ldrh	r2, [r7, #2]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025e4:	e003      	b.n	80025ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025e6:	887b      	ldrh	r3, [r7, #2]
 80025e8:	041a      	lsls	r2, r3, #16
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	619a      	str	r2, [r3, #24]
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
	...

080025fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b086      	sub	sp, #24
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e264      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	2b00      	cmp	r3, #0
 8002618:	d075      	beq.n	8002706 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800261a:	4ba3      	ldr	r3, [pc, #652]	; (80028a8 <HAL_RCC_OscConfig+0x2ac>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f003 030c 	and.w	r3, r3, #12
 8002622:	2b04      	cmp	r3, #4
 8002624:	d00c      	beq.n	8002640 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002626:	4ba0      	ldr	r3, [pc, #640]	; (80028a8 <HAL_RCC_OscConfig+0x2ac>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800262e:	2b08      	cmp	r3, #8
 8002630:	d112      	bne.n	8002658 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002632:	4b9d      	ldr	r3, [pc, #628]	; (80028a8 <HAL_RCC_OscConfig+0x2ac>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800263a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800263e:	d10b      	bne.n	8002658 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002640:	4b99      	ldr	r3, [pc, #612]	; (80028a8 <HAL_RCC_OscConfig+0x2ac>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d05b      	beq.n	8002704 <HAL_RCC_OscConfig+0x108>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d157      	bne.n	8002704 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e23f      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002660:	d106      	bne.n	8002670 <HAL_RCC_OscConfig+0x74>
 8002662:	4b91      	ldr	r3, [pc, #580]	; (80028a8 <HAL_RCC_OscConfig+0x2ac>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a90      	ldr	r2, [pc, #576]	; (80028a8 <HAL_RCC_OscConfig+0x2ac>)
 8002668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800266c:	6013      	str	r3, [r2, #0]
 800266e:	e01d      	b.n	80026ac <HAL_RCC_OscConfig+0xb0>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002678:	d10c      	bne.n	8002694 <HAL_RCC_OscConfig+0x98>
 800267a:	4b8b      	ldr	r3, [pc, #556]	; (80028a8 <HAL_RCC_OscConfig+0x2ac>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a8a      	ldr	r2, [pc, #552]	; (80028a8 <HAL_RCC_OscConfig+0x2ac>)
 8002680:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002684:	6013      	str	r3, [r2, #0]
 8002686:	4b88      	ldr	r3, [pc, #544]	; (80028a8 <HAL_RCC_OscConfig+0x2ac>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a87      	ldr	r2, [pc, #540]	; (80028a8 <HAL_RCC_OscConfig+0x2ac>)
 800268c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002690:	6013      	str	r3, [r2, #0]
 8002692:	e00b      	b.n	80026ac <HAL_RCC_OscConfig+0xb0>
 8002694:	4b84      	ldr	r3, [pc, #528]	; (80028a8 <HAL_RCC_OscConfig+0x2ac>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a83      	ldr	r2, [pc, #524]	; (80028a8 <HAL_RCC_OscConfig+0x2ac>)
 800269a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800269e:	6013      	str	r3, [r2, #0]
 80026a0:	4b81      	ldr	r3, [pc, #516]	; (80028a8 <HAL_RCC_OscConfig+0x2ac>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a80      	ldr	r2, [pc, #512]	; (80028a8 <HAL_RCC_OscConfig+0x2ac>)
 80026a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d013      	beq.n	80026dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b4:	f7fe fd42 	bl	800113c <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026bc:	f7fe fd3e 	bl	800113c <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b64      	cmp	r3, #100	; 0x64
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e204      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ce:	4b76      	ldr	r3, [pc, #472]	; (80028a8 <HAL_RCC_OscConfig+0x2ac>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d0f0      	beq.n	80026bc <HAL_RCC_OscConfig+0xc0>
 80026da:	e014      	b.n	8002706 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026dc:	f7fe fd2e 	bl	800113c <HAL_GetTick>
 80026e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026e2:	e008      	b.n	80026f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026e4:	f7fe fd2a 	bl	800113c <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b64      	cmp	r3, #100	; 0x64
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e1f0      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026f6:	4b6c      	ldr	r3, [pc, #432]	; (80028a8 <HAL_RCC_OscConfig+0x2ac>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d1f0      	bne.n	80026e4 <HAL_RCC_OscConfig+0xe8>
 8002702:	e000      	b.n	8002706 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002704:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d063      	beq.n	80027da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002712:	4b65      	ldr	r3, [pc, #404]	; (80028a8 <HAL_RCC_OscConfig+0x2ac>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f003 030c 	and.w	r3, r3, #12
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00b      	beq.n	8002736 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800271e:	4b62      	ldr	r3, [pc, #392]	; (80028a8 <HAL_RCC_OscConfig+0x2ac>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002726:	2b08      	cmp	r3, #8
 8002728:	d11c      	bne.n	8002764 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800272a:	4b5f      	ldr	r3, [pc, #380]	; (80028a8 <HAL_RCC_OscConfig+0x2ac>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d116      	bne.n	8002764 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002736:	4b5c      	ldr	r3, [pc, #368]	; (80028a8 <HAL_RCC_OscConfig+0x2ac>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d005      	beq.n	800274e <HAL_RCC_OscConfig+0x152>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d001      	beq.n	800274e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e1c4      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800274e:	4b56      	ldr	r3, [pc, #344]	; (80028a8 <HAL_RCC_OscConfig+0x2ac>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	4952      	ldr	r1, [pc, #328]	; (80028a8 <HAL_RCC_OscConfig+0x2ac>)
 800275e:	4313      	orrs	r3, r2
 8002760:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002762:	e03a      	b.n	80027da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d020      	beq.n	80027ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800276c:	4b4f      	ldr	r3, [pc, #316]	; (80028ac <HAL_RCC_OscConfig+0x2b0>)
 800276e:	2201      	movs	r2, #1
 8002770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002772:	f7fe fce3 	bl	800113c <HAL_GetTick>
 8002776:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002778:	e008      	b.n	800278c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800277a:	f7fe fcdf 	bl	800113c <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d901      	bls.n	800278c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e1a5      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800278c:	4b46      	ldr	r3, [pc, #280]	; (80028a8 <HAL_RCC_OscConfig+0x2ac>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0302 	and.w	r3, r3, #2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d0f0      	beq.n	800277a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002798:	4b43      	ldr	r3, [pc, #268]	; (80028a8 <HAL_RCC_OscConfig+0x2ac>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	00db      	lsls	r3, r3, #3
 80027a6:	4940      	ldr	r1, [pc, #256]	; (80028a8 <HAL_RCC_OscConfig+0x2ac>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	600b      	str	r3, [r1, #0]
 80027ac:	e015      	b.n	80027da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027ae:	4b3f      	ldr	r3, [pc, #252]	; (80028ac <HAL_RCC_OscConfig+0x2b0>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b4:	f7fe fcc2 	bl	800113c <HAL_GetTick>
 80027b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ba:	e008      	b.n	80027ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027bc:	f7fe fcbe 	bl	800113c <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e184      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ce:	4b36      	ldr	r3, [pc, #216]	; (80028a8 <HAL_RCC_OscConfig+0x2ac>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1f0      	bne.n	80027bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0308 	and.w	r3, r3, #8
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d030      	beq.n	8002848 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d016      	beq.n	800281c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027ee:	4b30      	ldr	r3, [pc, #192]	; (80028b0 <HAL_RCC_OscConfig+0x2b4>)
 80027f0:	2201      	movs	r2, #1
 80027f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f4:	f7fe fca2 	bl	800113c <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027fa:	e008      	b.n	800280e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027fc:	f7fe fc9e 	bl	800113c <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e164      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800280e:	4b26      	ldr	r3, [pc, #152]	; (80028a8 <HAL_RCC_OscConfig+0x2ac>)
 8002810:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d0f0      	beq.n	80027fc <HAL_RCC_OscConfig+0x200>
 800281a:	e015      	b.n	8002848 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800281c:	4b24      	ldr	r3, [pc, #144]	; (80028b0 <HAL_RCC_OscConfig+0x2b4>)
 800281e:	2200      	movs	r2, #0
 8002820:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002822:	f7fe fc8b 	bl	800113c <HAL_GetTick>
 8002826:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002828:	e008      	b.n	800283c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800282a:	f7fe fc87 	bl	800113c <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	2b02      	cmp	r3, #2
 8002836:	d901      	bls.n	800283c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e14d      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800283c:	4b1a      	ldr	r3, [pc, #104]	; (80028a8 <HAL_RCC_OscConfig+0x2ac>)
 800283e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1f0      	bne.n	800282a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0304 	and.w	r3, r3, #4
 8002850:	2b00      	cmp	r3, #0
 8002852:	f000 80a0 	beq.w	8002996 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002856:	2300      	movs	r3, #0
 8002858:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800285a:	4b13      	ldr	r3, [pc, #76]	; (80028a8 <HAL_RCC_OscConfig+0x2ac>)
 800285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d10f      	bne.n	8002886 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002866:	2300      	movs	r3, #0
 8002868:	60bb      	str	r3, [r7, #8]
 800286a:	4b0f      	ldr	r3, [pc, #60]	; (80028a8 <HAL_RCC_OscConfig+0x2ac>)
 800286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286e:	4a0e      	ldr	r2, [pc, #56]	; (80028a8 <HAL_RCC_OscConfig+0x2ac>)
 8002870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002874:	6413      	str	r3, [r2, #64]	; 0x40
 8002876:	4b0c      	ldr	r3, [pc, #48]	; (80028a8 <HAL_RCC_OscConfig+0x2ac>)
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800287e:	60bb      	str	r3, [r7, #8]
 8002880:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002882:	2301      	movs	r3, #1
 8002884:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002886:	4b0b      	ldr	r3, [pc, #44]	; (80028b4 <HAL_RCC_OscConfig+0x2b8>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288e:	2b00      	cmp	r3, #0
 8002890:	d121      	bne.n	80028d6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002892:	4b08      	ldr	r3, [pc, #32]	; (80028b4 <HAL_RCC_OscConfig+0x2b8>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a07      	ldr	r2, [pc, #28]	; (80028b4 <HAL_RCC_OscConfig+0x2b8>)
 8002898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800289c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800289e:	f7fe fc4d 	bl	800113c <HAL_GetTick>
 80028a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a4:	e011      	b.n	80028ca <HAL_RCC_OscConfig+0x2ce>
 80028a6:	bf00      	nop
 80028a8:	40023800 	.word	0x40023800
 80028ac:	42470000 	.word	0x42470000
 80028b0:	42470e80 	.word	0x42470e80
 80028b4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028b8:	f7fe fc40 	bl	800113c <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e106      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ca:	4b85      	ldr	r3, [pc, #532]	; (8002ae0 <HAL_RCC_OscConfig+0x4e4>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d0f0      	beq.n	80028b8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d106      	bne.n	80028ec <HAL_RCC_OscConfig+0x2f0>
 80028de:	4b81      	ldr	r3, [pc, #516]	; (8002ae4 <HAL_RCC_OscConfig+0x4e8>)
 80028e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e2:	4a80      	ldr	r2, [pc, #512]	; (8002ae4 <HAL_RCC_OscConfig+0x4e8>)
 80028e4:	f043 0301 	orr.w	r3, r3, #1
 80028e8:	6713      	str	r3, [r2, #112]	; 0x70
 80028ea:	e01c      	b.n	8002926 <HAL_RCC_OscConfig+0x32a>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	2b05      	cmp	r3, #5
 80028f2:	d10c      	bne.n	800290e <HAL_RCC_OscConfig+0x312>
 80028f4:	4b7b      	ldr	r3, [pc, #492]	; (8002ae4 <HAL_RCC_OscConfig+0x4e8>)
 80028f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f8:	4a7a      	ldr	r2, [pc, #488]	; (8002ae4 <HAL_RCC_OscConfig+0x4e8>)
 80028fa:	f043 0304 	orr.w	r3, r3, #4
 80028fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002900:	4b78      	ldr	r3, [pc, #480]	; (8002ae4 <HAL_RCC_OscConfig+0x4e8>)
 8002902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002904:	4a77      	ldr	r2, [pc, #476]	; (8002ae4 <HAL_RCC_OscConfig+0x4e8>)
 8002906:	f043 0301 	orr.w	r3, r3, #1
 800290a:	6713      	str	r3, [r2, #112]	; 0x70
 800290c:	e00b      	b.n	8002926 <HAL_RCC_OscConfig+0x32a>
 800290e:	4b75      	ldr	r3, [pc, #468]	; (8002ae4 <HAL_RCC_OscConfig+0x4e8>)
 8002910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002912:	4a74      	ldr	r2, [pc, #464]	; (8002ae4 <HAL_RCC_OscConfig+0x4e8>)
 8002914:	f023 0301 	bic.w	r3, r3, #1
 8002918:	6713      	str	r3, [r2, #112]	; 0x70
 800291a:	4b72      	ldr	r3, [pc, #456]	; (8002ae4 <HAL_RCC_OscConfig+0x4e8>)
 800291c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800291e:	4a71      	ldr	r2, [pc, #452]	; (8002ae4 <HAL_RCC_OscConfig+0x4e8>)
 8002920:	f023 0304 	bic.w	r3, r3, #4
 8002924:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d015      	beq.n	800295a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800292e:	f7fe fc05 	bl	800113c <HAL_GetTick>
 8002932:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002934:	e00a      	b.n	800294c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002936:	f7fe fc01 	bl	800113c <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	f241 3288 	movw	r2, #5000	; 0x1388
 8002944:	4293      	cmp	r3, r2
 8002946:	d901      	bls.n	800294c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e0c5      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800294c:	4b65      	ldr	r3, [pc, #404]	; (8002ae4 <HAL_RCC_OscConfig+0x4e8>)
 800294e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d0ee      	beq.n	8002936 <HAL_RCC_OscConfig+0x33a>
 8002958:	e014      	b.n	8002984 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800295a:	f7fe fbef 	bl	800113c <HAL_GetTick>
 800295e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002960:	e00a      	b.n	8002978 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002962:	f7fe fbeb 	bl	800113c <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002970:	4293      	cmp	r3, r2
 8002972:	d901      	bls.n	8002978 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e0af      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002978:	4b5a      	ldr	r3, [pc, #360]	; (8002ae4 <HAL_RCC_OscConfig+0x4e8>)
 800297a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800297c:	f003 0302 	and.w	r3, r3, #2
 8002980:	2b00      	cmp	r3, #0
 8002982:	d1ee      	bne.n	8002962 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002984:	7dfb      	ldrb	r3, [r7, #23]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d105      	bne.n	8002996 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800298a:	4b56      	ldr	r3, [pc, #344]	; (8002ae4 <HAL_RCC_OscConfig+0x4e8>)
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	4a55      	ldr	r2, [pc, #340]	; (8002ae4 <HAL_RCC_OscConfig+0x4e8>)
 8002990:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002994:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	2b00      	cmp	r3, #0
 800299c:	f000 809b 	beq.w	8002ad6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029a0:	4b50      	ldr	r3, [pc, #320]	; (8002ae4 <HAL_RCC_OscConfig+0x4e8>)
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f003 030c 	and.w	r3, r3, #12
 80029a8:	2b08      	cmp	r3, #8
 80029aa:	d05c      	beq.n	8002a66 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d141      	bne.n	8002a38 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029b4:	4b4c      	ldr	r3, [pc, #304]	; (8002ae8 <HAL_RCC_OscConfig+0x4ec>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ba:	f7fe fbbf 	bl	800113c <HAL_GetTick>
 80029be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029c0:	e008      	b.n	80029d4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029c2:	f7fe fbbb 	bl	800113c <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d901      	bls.n	80029d4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e081      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029d4:	4b43      	ldr	r3, [pc, #268]	; (8002ae4 <HAL_RCC_OscConfig+0x4e8>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d1f0      	bne.n	80029c2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	69da      	ldr	r2, [r3, #28]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	431a      	orrs	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ee:	019b      	lsls	r3, r3, #6
 80029f0:	431a      	orrs	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f6:	085b      	lsrs	r3, r3, #1
 80029f8:	3b01      	subs	r3, #1
 80029fa:	041b      	lsls	r3, r3, #16
 80029fc:	431a      	orrs	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a02:	061b      	lsls	r3, r3, #24
 8002a04:	4937      	ldr	r1, [pc, #220]	; (8002ae4 <HAL_RCC_OscConfig+0x4e8>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a0a:	4b37      	ldr	r3, [pc, #220]	; (8002ae8 <HAL_RCC_OscConfig+0x4ec>)
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a10:	f7fe fb94 	bl	800113c <HAL_GetTick>
 8002a14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a16:	e008      	b.n	8002a2a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a18:	f7fe fb90 	bl	800113c <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e056      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a2a:	4b2e      	ldr	r3, [pc, #184]	; (8002ae4 <HAL_RCC_OscConfig+0x4e8>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d0f0      	beq.n	8002a18 <HAL_RCC_OscConfig+0x41c>
 8002a36:	e04e      	b.n	8002ad6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a38:	4b2b      	ldr	r3, [pc, #172]	; (8002ae8 <HAL_RCC_OscConfig+0x4ec>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a3e:	f7fe fb7d 	bl	800113c <HAL_GetTick>
 8002a42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a44:	e008      	b.n	8002a58 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a46:	f7fe fb79 	bl	800113c <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d901      	bls.n	8002a58 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e03f      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a58:	4b22      	ldr	r3, [pc, #136]	; (8002ae4 <HAL_RCC_OscConfig+0x4e8>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d1f0      	bne.n	8002a46 <HAL_RCC_OscConfig+0x44a>
 8002a64:	e037      	b.n	8002ad6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d101      	bne.n	8002a72 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e032      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a72:	4b1c      	ldr	r3, [pc, #112]	; (8002ae4 <HAL_RCC_OscConfig+0x4e8>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d028      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d121      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d11a      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002aa8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d111      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab8:	085b      	lsrs	r3, r3, #1
 8002aba:	3b01      	subs	r3, #1
 8002abc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d107      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002acc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d001      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e000      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3718      	adds	r7, #24
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	40007000 	.word	0x40007000
 8002ae4:	40023800 	.word	0x40023800
 8002ae8:	42470060 	.word	0x42470060

08002aec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d101      	bne.n	8002b00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e0cc      	b.n	8002c9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b00:	4b68      	ldr	r3, [pc, #416]	; (8002ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0307 	and.w	r3, r3, #7
 8002b08:	683a      	ldr	r2, [r7, #0]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d90c      	bls.n	8002b28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b0e:	4b65      	ldr	r3, [pc, #404]	; (8002ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	b2d2      	uxtb	r2, r2
 8002b14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b16:	4b63      	ldr	r3, [pc, #396]	; (8002ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0307 	and.w	r3, r3, #7
 8002b1e:	683a      	ldr	r2, [r7, #0]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d001      	beq.n	8002b28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e0b8      	b.n	8002c9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d020      	beq.n	8002b76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0304 	and.w	r3, r3, #4
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d005      	beq.n	8002b4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b40:	4b59      	ldr	r3, [pc, #356]	; (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	4a58      	ldr	r2, [pc, #352]	; (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0308 	and.w	r3, r3, #8
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d005      	beq.n	8002b64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b58:	4b53      	ldr	r3, [pc, #332]	; (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	4a52      	ldr	r2, [pc, #328]	; (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b64:	4b50      	ldr	r3, [pc, #320]	; (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	494d      	ldr	r1, [pc, #308]	; (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d044      	beq.n	8002c0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d107      	bne.n	8002b9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b8a:	4b47      	ldr	r3, [pc, #284]	; (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d119      	bne.n	8002bca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e07f      	b.n	8002c9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d003      	beq.n	8002baa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ba6:	2b03      	cmp	r3, #3
 8002ba8:	d107      	bne.n	8002bba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002baa:	4b3f      	ldr	r3, [pc, #252]	; (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d109      	bne.n	8002bca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e06f      	b.n	8002c9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bba:	4b3b      	ldr	r3, [pc, #236]	; (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e067      	b.n	8002c9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bca:	4b37      	ldr	r3, [pc, #220]	; (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f023 0203 	bic.w	r2, r3, #3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	4934      	ldr	r1, [pc, #208]	; (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bdc:	f7fe faae 	bl	800113c <HAL_GetTick>
 8002be0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002be2:	e00a      	b.n	8002bfa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002be4:	f7fe faaa 	bl	800113c <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e04f      	b.n	8002c9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bfa:	4b2b      	ldr	r3, [pc, #172]	; (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f003 020c 	and.w	r2, r3, #12
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d1eb      	bne.n	8002be4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c0c:	4b25      	ldr	r3, [pc, #148]	; (8002ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0307 	and.w	r3, r3, #7
 8002c14:	683a      	ldr	r2, [r7, #0]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d20c      	bcs.n	8002c34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c1a:	4b22      	ldr	r3, [pc, #136]	; (8002ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c1c:	683a      	ldr	r2, [r7, #0]
 8002c1e:	b2d2      	uxtb	r2, r2
 8002c20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c22:	4b20      	ldr	r3, [pc, #128]	; (8002ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0307 	and.w	r3, r3, #7
 8002c2a:	683a      	ldr	r2, [r7, #0]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d001      	beq.n	8002c34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e032      	b.n	8002c9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0304 	and.w	r3, r3, #4
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d008      	beq.n	8002c52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c40:	4b19      	ldr	r3, [pc, #100]	; (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	4916      	ldr	r1, [pc, #88]	; (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0308 	and.w	r3, r3, #8
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d009      	beq.n	8002c72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c5e:	4b12      	ldr	r3, [pc, #72]	; (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	490e      	ldr	r1, [pc, #56]	; (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c72:	f000 f821 	bl	8002cb8 <HAL_RCC_GetSysClockFreq>
 8002c76:	4602      	mov	r2, r0
 8002c78:	4b0b      	ldr	r3, [pc, #44]	; (8002ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	091b      	lsrs	r3, r3, #4
 8002c7e:	f003 030f 	and.w	r3, r3, #15
 8002c82:	490a      	ldr	r1, [pc, #40]	; (8002cac <HAL_RCC_ClockConfig+0x1c0>)
 8002c84:	5ccb      	ldrb	r3, [r1, r3]
 8002c86:	fa22 f303 	lsr.w	r3, r2, r3
 8002c8a:	4a09      	ldr	r2, [pc, #36]	; (8002cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c8e:	4b09      	ldr	r3, [pc, #36]	; (8002cb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7fe fa0e 	bl	80010b4 <HAL_InitTick>

  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	40023c00 	.word	0x40023c00
 8002ca8:	40023800 	.word	0x40023800
 8002cac:	08003e10 	.word	0x08003e10
 8002cb0:	20000000 	.word	0x20000000
 8002cb4:	20000004 	.word	0x20000004

08002cb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cb8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002cbc:	b084      	sub	sp, #16
 8002cbe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	607b      	str	r3, [r7, #4]
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	60fb      	str	r3, [r7, #12]
 8002cc8:	2300      	movs	r3, #0
 8002cca:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cd0:	4b67      	ldr	r3, [pc, #412]	; (8002e70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f003 030c 	and.w	r3, r3, #12
 8002cd8:	2b08      	cmp	r3, #8
 8002cda:	d00d      	beq.n	8002cf8 <HAL_RCC_GetSysClockFreq+0x40>
 8002cdc:	2b08      	cmp	r3, #8
 8002cde:	f200 80bd 	bhi.w	8002e5c <HAL_RCC_GetSysClockFreq+0x1a4>
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d002      	beq.n	8002cec <HAL_RCC_GetSysClockFreq+0x34>
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d003      	beq.n	8002cf2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002cea:	e0b7      	b.n	8002e5c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cec:	4b61      	ldr	r3, [pc, #388]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002cee:	60bb      	str	r3, [r7, #8]
       break;
 8002cf0:	e0b7      	b.n	8002e62 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cf2:	4b61      	ldr	r3, [pc, #388]	; (8002e78 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002cf4:	60bb      	str	r3, [r7, #8]
      break;
 8002cf6:	e0b4      	b.n	8002e62 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cf8:	4b5d      	ldr	r3, [pc, #372]	; (8002e70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d00:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d02:	4b5b      	ldr	r3, [pc, #364]	; (8002e70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d04d      	beq.n	8002daa <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d0e:	4b58      	ldr	r3, [pc, #352]	; (8002e70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	099b      	lsrs	r3, r3, #6
 8002d14:	461a      	mov	r2, r3
 8002d16:	f04f 0300 	mov.w	r3, #0
 8002d1a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002d1e:	f04f 0100 	mov.w	r1, #0
 8002d22:	ea02 0800 	and.w	r8, r2, r0
 8002d26:	ea03 0901 	and.w	r9, r3, r1
 8002d2a:	4640      	mov	r0, r8
 8002d2c:	4649      	mov	r1, r9
 8002d2e:	f04f 0200 	mov.w	r2, #0
 8002d32:	f04f 0300 	mov.w	r3, #0
 8002d36:	014b      	lsls	r3, r1, #5
 8002d38:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002d3c:	0142      	lsls	r2, r0, #5
 8002d3e:	4610      	mov	r0, r2
 8002d40:	4619      	mov	r1, r3
 8002d42:	ebb0 0008 	subs.w	r0, r0, r8
 8002d46:	eb61 0109 	sbc.w	r1, r1, r9
 8002d4a:	f04f 0200 	mov.w	r2, #0
 8002d4e:	f04f 0300 	mov.w	r3, #0
 8002d52:	018b      	lsls	r3, r1, #6
 8002d54:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002d58:	0182      	lsls	r2, r0, #6
 8002d5a:	1a12      	subs	r2, r2, r0
 8002d5c:	eb63 0301 	sbc.w	r3, r3, r1
 8002d60:	f04f 0000 	mov.w	r0, #0
 8002d64:	f04f 0100 	mov.w	r1, #0
 8002d68:	00d9      	lsls	r1, r3, #3
 8002d6a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d6e:	00d0      	lsls	r0, r2, #3
 8002d70:	4602      	mov	r2, r0
 8002d72:	460b      	mov	r3, r1
 8002d74:	eb12 0208 	adds.w	r2, r2, r8
 8002d78:	eb43 0309 	adc.w	r3, r3, r9
 8002d7c:	f04f 0000 	mov.w	r0, #0
 8002d80:	f04f 0100 	mov.w	r1, #0
 8002d84:	0259      	lsls	r1, r3, #9
 8002d86:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002d8a:	0250      	lsls	r0, r2, #9
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	460b      	mov	r3, r1
 8002d90:	4610      	mov	r0, r2
 8002d92:	4619      	mov	r1, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	461a      	mov	r2, r3
 8002d98:	f04f 0300 	mov.w	r3, #0
 8002d9c:	f7fd fa70 	bl	8000280 <__aeabi_uldivmod>
 8002da0:	4602      	mov	r2, r0
 8002da2:	460b      	mov	r3, r1
 8002da4:	4613      	mov	r3, r2
 8002da6:	60fb      	str	r3, [r7, #12]
 8002da8:	e04a      	b.n	8002e40 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002daa:	4b31      	ldr	r3, [pc, #196]	; (8002e70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	099b      	lsrs	r3, r3, #6
 8002db0:	461a      	mov	r2, r3
 8002db2:	f04f 0300 	mov.w	r3, #0
 8002db6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002dba:	f04f 0100 	mov.w	r1, #0
 8002dbe:	ea02 0400 	and.w	r4, r2, r0
 8002dc2:	ea03 0501 	and.w	r5, r3, r1
 8002dc6:	4620      	mov	r0, r4
 8002dc8:	4629      	mov	r1, r5
 8002dca:	f04f 0200 	mov.w	r2, #0
 8002dce:	f04f 0300 	mov.w	r3, #0
 8002dd2:	014b      	lsls	r3, r1, #5
 8002dd4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002dd8:	0142      	lsls	r2, r0, #5
 8002dda:	4610      	mov	r0, r2
 8002ddc:	4619      	mov	r1, r3
 8002dde:	1b00      	subs	r0, r0, r4
 8002de0:	eb61 0105 	sbc.w	r1, r1, r5
 8002de4:	f04f 0200 	mov.w	r2, #0
 8002de8:	f04f 0300 	mov.w	r3, #0
 8002dec:	018b      	lsls	r3, r1, #6
 8002dee:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002df2:	0182      	lsls	r2, r0, #6
 8002df4:	1a12      	subs	r2, r2, r0
 8002df6:	eb63 0301 	sbc.w	r3, r3, r1
 8002dfa:	f04f 0000 	mov.w	r0, #0
 8002dfe:	f04f 0100 	mov.w	r1, #0
 8002e02:	00d9      	lsls	r1, r3, #3
 8002e04:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e08:	00d0      	lsls	r0, r2, #3
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	1912      	adds	r2, r2, r4
 8002e10:	eb45 0303 	adc.w	r3, r5, r3
 8002e14:	f04f 0000 	mov.w	r0, #0
 8002e18:	f04f 0100 	mov.w	r1, #0
 8002e1c:	0299      	lsls	r1, r3, #10
 8002e1e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002e22:	0290      	lsls	r0, r2, #10
 8002e24:	4602      	mov	r2, r0
 8002e26:	460b      	mov	r3, r1
 8002e28:	4610      	mov	r0, r2
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	461a      	mov	r2, r3
 8002e30:	f04f 0300 	mov.w	r3, #0
 8002e34:	f7fd fa24 	bl	8000280 <__aeabi_uldivmod>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e40:	4b0b      	ldr	r3, [pc, #44]	; (8002e70 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	0c1b      	lsrs	r3, r3, #16
 8002e46:	f003 0303 	and.w	r3, r3, #3
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e58:	60bb      	str	r3, [r7, #8]
      break;
 8002e5a:	e002      	b.n	8002e62 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e5c:	4b05      	ldr	r3, [pc, #20]	; (8002e74 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002e5e:	60bb      	str	r3, [r7, #8]
      break;
 8002e60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e62:	68bb      	ldr	r3, [r7, #8]
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3710      	adds	r7, #16
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002e6e:	bf00      	nop
 8002e70:	40023800 	.word	0x40023800
 8002e74:	00f42400 	.word	0x00f42400
 8002e78:	007a1200 	.word	0x007a1200

08002e7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e80:	4b03      	ldr	r3, [pc, #12]	; (8002e90 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e82:	681b      	ldr	r3, [r3, #0]
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	20000000 	.word	0x20000000

08002e94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e98:	f7ff fff0 	bl	8002e7c <HAL_RCC_GetHCLKFreq>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	4b05      	ldr	r3, [pc, #20]	; (8002eb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	0a9b      	lsrs	r3, r3, #10
 8002ea4:	f003 0307 	and.w	r3, r3, #7
 8002ea8:	4903      	ldr	r1, [pc, #12]	; (8002eb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002eaa:	5ccb      	ldrb	r3, [r1, r3]
 8002eac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	08003e20 	.word	0x08003e20

08002ebc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ec0:	f7ff ffdc 	bl	8002e7c <HAL_RCC_GetHCLKFreq>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	4b05      	ldr	r3, [pc, #20]	; (8002edc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	0b5b      	lsrs	r3, r3, #13
 8002ecc:	f003 0307 	and.w	r3, r3, #7
 8002ed0:	4903      	ldr	r1, [pc, #12]	; (8002ee0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ed2:	5ccb      	ldrb	r3, [r1, r3]
 8002ed4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	40023800 	.word	0x40023800
 8002ee0:	08003e20 	.word	0x08003e20

08002ee4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e03f      	b.n	8002f76 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d106      	bne.n	8002f10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f7fd ffc2 	bl	8000e94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2224      	movs	r2, #36	; 0x24
 8002f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68da      	ldr	r2, [r3, #12]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f000 f929 	bl	8003180 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	691a      	ldr	r2, [r3, #16]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	695a      	ldr	r2, [r3, #20]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68da      	ldr	r2, [r3, #12]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2220      	movs	r2, #32
 8002f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2220      	movs	r2, #32
 8002f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b08a      	sub	sp, #40	; 0x28
 8002f82:	af02      	add	r7, sp, #8
 8002f84:	60f8      	str	r0, [r7, #12]
 8002f86:	60b9      	str	r1, [r7, #8]
 8002f88:	603b      	str	r3, [r7, #0]
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b20      	cmp	r3, #32
 8002f9c:	d17c      	bne.n	8003098 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d002      	beq.n	8002faa <HAL_UART_Transmit+0x2c>
 8002fa4:	88fb      	ldrh	r3, [r7, #6]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d101      	bne.n	8002fae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e075      	b.n	800309a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d101      	bne.n	8002fbc <HAL_UART_Transmit+0x3e>
 8002fb8:	2302      	movs	r3, #2
 8002fba:	e06e      	b.n	800309a <HAL_UART_Transmit+0x11c>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2221      	movs	r2, #33	; 0x21
 8002fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fd2:	f7fe f8b3 	bl	800113c <HAL_GetTick>
 8002fd6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	88fa      	ldrh	r2, [r7, #6]
 8002fdc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	88fa      	ldrh	r2, [r7, #6]
 8002fe2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fec:	d108      	bne.n	8003000 <HAL_UART_Transmit+0x82>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d104      	bne.n	8003000 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	61bb      	str	r3, [r7, #24]
 8002ffe:	e003      	b.n	8003008 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003004:	2300      	movs	r3, #0
 8003006:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003010:	e02a      	b.n	8003068 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	9300      	str	r3, [sp, #0]
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	2200      	movs	r2, #0
 800301a:	2180      	movs	r1, #128	; 0x80
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f000 f840 	bl	80030a2 <UART_WaitOnFlagUntilTimeout>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d001      	beq.n	800302c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e036      	b.n	800309a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10b      	bne.n	800304a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	881b      	ldrh	r3, [r3, #0]
 8003036:	461a      	mov	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003040:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	3302      	adds	r3, #2
 8003046:	61bb      	str	r3, [r7, #24]
 8003048:	e007      	b.n	800305a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	781a      	ldrb	r2, [r3, #0]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	3301      	adds	r3, #1
 8003058:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800305e:	b29b      	uxth	r3, r3
 8003060:	3b01      	subs	r3, #1
 8003062:	b29a      	uxth	r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800306c:	b29b      	uxth	r3, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d1cf      	bne.n	8003012 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	9300      	str	r3, [sp, #0]
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	2200      	movs	r2, #0
 800307a:	2140      	movs	r1, #64	; 0x40
 800307c:	68f8      	ldr	r0, [r7, #12]
 800307e:	f000 f810 	bl	80030a2 <UART_WaitOnFlagUntilTimeout>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d001      	beq.n	800308c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e006      	b.n	800309a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2220      	movs	r2, #32
 8003090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003094:	2300      	movs	r3, #0
 8003096:	e000      	b.n	800309a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003098:	2302      	movs	r3, #2
  }
}
 800309a:	4618      	mov	r0, r3
 800309c:	3720      	adds	r7, #32
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b090      	sub	sp, #64	; 0x40
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	60f8      	str	r0, [r7, #12]
 80030aa:	60b9      	str	r1, [r7, #8]
 80030ac:	603b      	str	r3, [r7, #0]
 80030ae:	4613      	mov	r3, r2
 80030b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030b2:	e050      	b.n	8003156 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030ba:	d04c      	beq.n	8003156 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80030bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d007      	beq.n	80030d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80030c2:	f7fe f83b 	bl	800113c <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d241      	bcs.n	8003156 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	330c      	adds	r3, #12
 80030d8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030dc:	e853 3f00 	ldrex	r3, [r3]
 80030e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80030e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80030e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	330c      	adds	r3, #12
 80030f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030f2:	637a      	str	r2, [r7, #52]	; 0x34
 80030f4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030fa:	e841 2300 	strex	r3, r2, [r1]
 80030fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1e5      	bne.n	80030d2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	3314      	adds	r3, #20
 800310c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	e853 3f00 	ldrex	r3, [r3]
 8003114:	613b      	str	r3, [r7, #16]
   return(result);
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	f023 0301 	bic.w	r3, r3, #1
 800311c:	63bb      	str	r3, [r7, #56]	; 0x38
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	3314      	adds	r3, #20
 8003124:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003126:	623a      	str	r2, [r7, #32]
 8003128:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800312a:	69f9      	ldr	r1, [r7, #28]
 800312c:	6a3a      	ldr	r2, [r7, #32]
 800312e:	e841 2300 	strex	r3, r2, [r1]
 8003132:	61bb      	str	r3, [r7, #24]
   return(result);
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1e5      	bne.n	8003106 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2220      	movs	r2, #32
 800313e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2220      	movs	r2, #32
 8003146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e00f      	b.n	8003176 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	4013      	ands	r3, r2
 8003160:	68ba      	ldr	r2, [r7, #8]
 8003162:	429a      	cmp	r2, r3
 8003164:	bf0c      	ite	eq
 8003166:	2301      	moveq	r3, #1
 8003168:	2300      	movne	r3, #0
 800316a:	b2db      	uxtb	r3, r3
 800316c:	461a      	mov	r2, r3
 800316e:	79fb      	ldrb	r3, [r7, #7]
 8003170:	429a      	cmp	r2, r3
 8003172:	d09f      	beq.n	80030b4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3740      	adds	r7, #64	; 0x40
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
	...

08003180 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003184:	b09f      	sub	sp, #124	; 0x7c
 8003186:	af00      	add	r7, sp, #0
 8003188:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800318a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003194:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003196:	68d9      	ldr	r1, [r3, #12]
 8003198:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	ea40 0301 	orr.w	r3, r0, r1
 80031a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80031a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031a4:	689a      	ldr	r2, [r3, #8]
 80031a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	431a      	orrs	r2, r3
 80031ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031ae:	695b      	ldr	r3, [r3, #20]
 80031b0:	431a      	orrs	r2, r3
 80031b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031b4:	69db      	ldr	r3, [r3, #28]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80031ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80031c4:	f021 010c 	bic.w	r1, r1, #12
 80031c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031ce:	430b      	orrs	r3, r1
 80031d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	695b      	ldr	r3, [r3, #20]
 80031d8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80031dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031de:	6999      	ldr	r1, [r3, #24]
 80031e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	ea40 0301 	orr.w	r3, r0, r1
 80031e8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80031ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	4bc5      	ldr	r3, [pc, #788]	; (8003504 <UART_SetConfig+0x384>)
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d004      	beq.n	80031fe <UART_SetConfig+0x7e>
 80031f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	4bc3      	ldr	r3, [pc, #780]	; (8003508 <UART_SetConfig+0x388>)
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d103      	bne.n	8003206 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80031fe:	f7ff fe5d 	bl	8002ebc <HAL_RCC_GetPCLK2Freq>
 8003202:	6778      	str	r0, [r7, #116]	; 0x74
 8003204:	e002      	b.n	800320c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003206:	f7ff fe45 	bl	8002e94 <HAL_RCC_GetPCLK1Freq>
 800320a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800320c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800320e:	69db      	ldr	r3, [r3, #28]
 8003210:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003214:	f040 80b6 	bne.w	8003384 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003218:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800321a:	461c      	mov	r4, r3
 800321c:	f04f 0500 	mov.w	r5, #0
 8003220:	4622      	mov	r2, r4
 8003222:	462b      	mov	r3, r5
 8003224:	1891      	adds	r1, r2, r2
 8003226:	6439      	str	r1, [r7, #64]	; 0x40
 8003228:	415b      	adcs	r3, r3
 800322a:	647b      	str	r3, [r7, #68]	; 0x44
 800322c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003230:	1912      	adds	r2, r2, r4
 8003232:	eb45 0303 	adc.w	r3, r5, r3
 8003236:	f04f 0000 	mov.w	r0, #0
 800323a:	f04f 0100 	mov.w	r1, #0
 800323e:	00d9      	lsls	r1, r3, #3
 8003240:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003244:	00d0      	lsls	r0, r2, #3
 8003246:	4602      	mov	r2, r0
 8003248:	460b      	mov	r3, r1
 800324a:	1911      	adds	r1, r2, r4
 800324c:	6639      	str	r1, [r7, #96]	; 0x60
 800324e:	416b      	adcs	r3, r5
 8003250:	667b      	str	r3, [r7, #100]	; 0x64
 8003252:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	461a      	mov	r2, r3
 8003258:	f04f 0300 	mov.w	r3, #0
 800325c:	1891      	adds	r1, r2, r2
 800325e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003260:	415b      	adcs	r3, r3
 8003262:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003264:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003268:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800326c:	f7fd f808 	bl	8000280 <__aeabi_uldivmod>
 8003270:	4602      	mov	r2, r0
 8003272:	460b      	mov	r3, r1
 8003274:	4ba5      	ldr	r3, [pc, #660]	; (800350c <UART_SetConfig+0x38c>)
 8003276:	fba3 2302 	umull	r2, r3, r3, r2
 800327a:	095b      	lsrs	r3, r3, #5
 800327c:	011e      	lsls	r6, r3, #4
 800327e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003280:	461c      	mov	r4, r3
 8003282:	f04f 0500 	mov.w	r5, #0
 8003286:	4622      	mov	r2, r4
 8003288:	462b      	mov	r3, r5
 800328a:	1891      	adds	r1, r2, r2
 800328c:	6339      	str	r1, [r7, #48]	; 0x30
 800328e:	415b      	adcs	r3, r3
 8003290:	637b      	str	r3, [r7, #52]	; 0x34
 8003292:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003296:	1912      	adds	r2, r2, r4
 8003298:	eb45 0303 	adc.w	r3, r5, r3
 800329c:	f04f 0000 	mov.w	r0, #0
 80032a0:	f04f 0100 	mov.w	r1, #0
 80032a4:	00d9      	lsls	r1, r3, #3
 80032a6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80032aa:	00d0      	lsls	r0, r2, #3
 80032ac:	4602      	mov	r2, r0
 80032ae:	460b      	mov	r3, r1
 80032b0:	1911      	adds	r1, r2, r4
 80032b2:	65b9      	str	r1, [r7, #88]	; 0x58
 80032b4:	416b      	adcs	r3, r5
 80032b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	461a      	mov	r2, r3
 80032be:	f04f 0300 	mov.w	r3, #0
 80032c2:	1891      	adds	r1, r2, r2
 80032c4:	62b9      	str	r1, [r7, #40]	; 0x28
 80032c6:	415b      	adcs	r3, r3
 80032c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80032ce:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80032d2:	f7fc ffd5 	bl	8000280 <__aeabi_uldivmod>
 80032d6:	4602      	mov	r2, r0
 80032d8:	460b      	mov	r3, r1
 80032da:	4b8c      	ldr	r3, [pc, #560]	; (800350c <UART_SetConfig+0x38c>)
 80032dc:	fba3 1302 	umull	r1, r3, r3, r2
 80032e0:	095b      	lsrs	r3, r3, #5
 80032e2:	2164      	movs	r1, #100	; 0x64
 80032e4:	fb01 f303 	mul.w	r3, r1, r3
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	3332      	adds	r3, #50	; 0x32
 80032ee:	4a87      	ldr	r2, [pc, #540]	; (800350c <UART_SetConfig+0x38c>)
 80032f0:	fba2 2303 	umull	r2, r3, r2, r3
 80032f4:	095b      	lsrs	r3, r3, #5
 80032f6:	005b      	lsls	r3, r3, #1
 80032f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80032fc:	441e      	add	r6, r3
 80032fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003300:	4618      	mov	r0, r3
 8003302:	f04f 0100 	mov.w	r1, #0
 8003306:	4602      	mov	r2, r0
 8003308:	460b      	mov	r3, r1
 800330a:	1894      	adds	r4, r2, r2
 800330c:	623c      	str	r4, [r7, #32]
 800330e:	415b      	adcs	r3, r3
 8003310:	627b      	str	r3, [r7, #36]	; 0x24
 8003312:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003316:	1812      	adds	r2, r2, r0
 8003318:	eb41 0303 	adc.w	r3, r1, r3
 800331c:	f04f 0400 	mov.w	r4, #0
 8003320:	f04f 0500 	mov.w	r5, #0
 8003324:	00dd      	lsls	r5, r3, #3
 8003326:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800332a:	00d4      	lsls	r4, r2, #3
 800332c:	4622      	mov	r2, r4
 800332e:	462b      	mov	r3, r5
 8003330:	1814      	adds	r4, r2, r0
 8003332:	653c      	str	r4, [r7, #80]	; 0x50
 8003334:	414b      	adcs	r3, r1
 8003336:	657b      	str	r3, [r7, #84]	; 0x54
 8003338:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	461a      	mov	r2, r3
 800333e:	f04f 0300 	mov.w	r3, #0
 8003342:	1891      	adds	r1, r2, r2
 8003344:	61b9      	str	r1, [r7, #24]
 8003346:	415b      	adcs	r3, r3
 8003348:	61fb      	str	r3, [r7, #28]
 800334a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800334e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003352:	f7fc ff95 	bl	8000280 <__aeabi_uldivmod>
 8003356:	4602      	mov	r2, r0
 8003358:	460b      	mov	r3, r1
 800335a:	4b6c      	ldr	r3, [pc, #432]	; (800350c <UART_SetConfig+0x38c>)
 800335c:	fba3 1302 	umull	r1, r3, r3, r2
 8003360:	095b      	lsrs	r3, r3, #5
 8003362:	2164      	movs	r1, #100	; 0x64
 8003364:	fb01 f303 	mul.w	r3, r1, r3
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	3332      	adds	r3, #50	; 0x32
 800336e:	4a67      	ldr	r2, [pc, #412]	; (800350c <UART_SetConfig+0x38c>)
 8003370:	fba2 2303 	umull	r2, r3, r2, r3
 8003374:	095b      	lsrs	r3, r3, #5
 8003376:	f003 0207 	and.w	r2, r3, #7
 800337a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4432      	add	r2, r6
 8003380:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003382:	e0b9      	b.n	80034f8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003384:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003386:	461c      	mov	r4, r3
 8003388:	f04f 0500 	mov.w	r5, #0
 800338c:	4622      	mov	r2, r4
 800338e:	462b      	mov	r3, r5
 8003390:	1891      	adds	r1, r2, r2
 8003392:	6139      	str	r1, [r7, #16]
 8003394:	415b      	adcs	r3, r3
 8003396:	617b      	str	r3, [r7, #20]
 8003398:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800339c:	1912      	adds	r2, r2, r4
 800339e:	eb45 0303 	adc.w	r3, r5, r3
 80033a2:	f04f 0000 	mov.w	r0, #0
 80033a6:	f04f 0100 	mov.w	r1, #0
 80033aa:	00d9      	lsls	r1, r3, #3
 80033ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80033b0:	00d0      	lsls	r0, r2, #3
 80033b2:	4602      	mov	r2, r0
 80033b4:	460b      	mov	r3, r1
 80033b6:	eb12 0804 	adds.w	r8, r2, r4
 80033ba:	eb43 0905 	adc.w	r9, r3, r5
 80033be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f04f 0100 	mov.w	r1, #0
 80033c8:	f04f 0200 	mov.w	r2, #0
 80033cc:	f04f 0300 	mov.w	r3, #0
 80033d0:	008b      	lsls	r3, r1, #2
 80033d2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80033d6:	0082      	lsls	r2, r0, #2
 80033d8:	4640      	mov	r0, r8
 80033da:	4649      	mov	r1, r9
 80033dc:	f7fc ff50 	bl	8000280 <__aeabi_uldivmod>
 80033e0:	4602      	mov	r2, r0
 80033e2:	460b      	mov	r3, r1
 80033e4:	4b49      	ldr	r3, [pc, #292]	; (800350c <UART_SetConfig+0x38c>)
 80033e6:	fba3 2302 	umull	r2, r3, r3, r2
 80033ea:	095b      	lsrs	r3, r3, #5
 80033ec:	011e      	lsls	r6, r3, #4
 80033ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033f0:	4618      	mov	r0, r3
 80033f2:	f04f 0100 	mov.w	r1, #0
 80033f6:	4602      	mov	r2, r0
 80033f8:	460b      	mov	r3, r1
 80033fa:	1894      	adds	r4, r2, r2
 80033fc:	60bc      	str	r4, [r7, #8]
 80033fe:	415b      	adcs	r3, r3
 8003400:	60fb      	str	r3, [r7, #12]
 8003402:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003406:	1812      	adds	r2, r2, r0
 8003408:	eb41 0303 	adc.w	r3, r1, r3
 800340c:	f04f 0400 	mov.w	r4, #0
 8003410:	f04f 0500 	mov.w	r5, #0
 8003414:	00dd      	lsls	r5, r3, #3
 8003416:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800341a:	00d4      	lsls	r4, r2, #3
 800341c:	4622      	mov	r2, r4
 800341e:	462b      	mov	r3, r5
 8003420:	1814      	adds	r4, r2, r0
 8003422:	64bc      	str	r4, [r7, #72]	; 0x48
 8003424:	414b      	adcs	r3, r1
 8003426:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003428:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	4618      	mov	r0, r3
 800342e:	f04f 0100 	mov.w	r1, #0
 8003432:	f04f 0200 	mov.w	r2, #0
 8003436:	f04f 0300 	mov.w	r3, #0
 800343a:	008b      	lsls	r3, r1, #2
 800343c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003440:	0082      	lsls	r2, r0, #2
 8003442:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003446:	f7fc ff1b 	bl	8000280 <__aeabi_uldivmod>
 800344a:	4602      	mov	r2, r0
 800344c:	460b      	mov	r3, r1
 800344e:	4b2f      	ldr	r3, [pc, #188]	; (800350c <UART_SetConfig+0x38c>)
 8003450:	fba3 1302 	umull	r1, r3, r3, r2
 8003454:	095b      	lsrs	r3, r3, #5
 8003456:	2164      	movs	r1, #100	; 0x64
 8003458:	fb01 f303 	mul.w	r3, r1, r3
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	011b      	lsls	r3, r3, #4
 8003460:	3332      	adds	r3, #50	; 0x32
 8003462:	4a2a      	ldr	r2, [pc, #168]	; (800350c <UART_SetConfig+0x38c>)
 8003464:	fba2 2303 	umull	r2, r3, r2, r3
 8003468:	095b      	lsrs	r3, r3, #5
 800346a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800346e:	441e      	add	r6, r3
 8003470:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003472:	4618      	mov	r0, r3
 8003474:	f04f 0100 	mov.w	r1, #0
 8003478:	4602      	mov	r2, r0
 800347a:	460b      	mov	r3, r1
 800347c:	1894      	adds	r4, r2, r2
 800347e:	603c      	str	r4, [r7, #0]
 8003480:	415b      	adcs	r3, r3
 8003482:	607b      	str	r3, [r7, #4]
 8003484:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003488:	1812      	adds	r2, r2, r0
 800348a:	eb41 0303 	adc.w	r3, r1, r3
 800348e:	f04f 0400 	mov.w	r4, #0
 8003492:	f04f 0500 	mov.w	r5, #0
 8003496:	00dd      	lsls	r5, r3, #3
 8003498:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800349c:	00d4      	lsls	r4, r2, #3
 800349e:	4622      	mov	r2, r4
 80034a0:	462b      	mov	r3, r5
 80034a2:	eb12 0a00 	adds.w	sl, r2, r0
 80034a6:	eb43 0b01 	adc.w	fp, r3, r1
 80034aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f04f 0100 	mov.w	r1, #0
 80034b4:	f04f 0200 	mov.w	r2, #0
 80034b8:	f04f 0300 	mov.w	r3, #0
 80034bc:	008b      	lsls	r3, r1, #2
 80034be:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80034c2:	0082      	lsls	r2, r0, #2
 80034c4:	4650      	mov	r0, sl
 80034c6:	4659      	mov	r1, fp
 80034c8:	f7fc feda 	bl	8000280 <__aeabi_uldivmod>
 80034cc:	4602      	mov	r2, r0
 80034ce:	460b      	mov	r3, r1
 80034d0:	4b0e      	ldr	r3, [pc, #56]	; (800350c <UART_SetConfig+0x38c>)
 80034d2:	fba3 1302 	umull	r1, r3, r3, r2
 80034d6:	095b      	lsrs	r3, r3, #5
 80034d8:	2164      	movs	r1, #100	; 0x64
 80034da:	fb01 f303 	mul.w	r3, r1, r3
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	011b      	lsls	r3, r3, #4
 80034e2:	3332      	adds	r3, #50	; 0x32
 80034e4:	4a09      	ldr	r2, [pc, #36]	; (800350c <UART_SetConfig+0x38c>)
 80034e6:	fba2 2303 	umull	r2, r3, r2, r3
 80034ea:	095b      	lsrs	r3, r3, #5
 80034ec:	f003 020f 	and.w	r2, r3, #15
 80034f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4432      	add	r2, r6
 80034f6:	609a      	str	r2, [r3, #8]
}
 80034f8:	bf00      	nop
 80034fa:	377c      	adds	r7, #124	; 0x7c
 80034fc:	46bd      	mov	sp, r7
 80034fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003502:	bf00      	nop
 8003504:	40011000 	.word	0x40011000
 8003508:	40011400 	.word	0x40011400
 800350c:	51eb851f 	.word	0x51eb851f

08003510 <__errno>:
 8003510:	4b01      	ldr	r3, [pc, #4]	; (8003518 <__errno+0x8>)
 8003512:	6818      	ldr	r0, [r3, #0]
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	2000000c 	.word	0x2000000c

0800351c <__libc_init_array>:
 800351c:	b570      	push	{r4, r5, r6, lr}
 800351e:	4d0d      	ldr	r5, [pc, #52]	; (8003554 <__libc_init_array+0x38>)
 8003520:	4c0d      	ldr	r4, [pc, #52]	; (8003558 <__libc_init_array+0x3c>)
 8003522:	1b64      	subs	r4, r4, r5
 8003524:	10a4      	asrs	r4, r4, #2
 8003526:	2600      	movs	r6, #0
 8003528:	42a6      	cmp	r6, r4
 800352a:	d109      	bne.n	8003540 <__libc_init_array+0x24>
 800352c:	4d0b      	ldr	r5, [pc, #44]	; (800355c <__libc_init_array+0x40>)
 800352e:	4c0c      	ldr	r4, [pc, #48]	; (8003560 <__libc_init_array+0x44>)
 8003530:	f000 fc4e 	bl	8003dd0 <_init>
 8003534:	1b64      	subs	r4, r4, r5
 8003536:	10a4      	asrs	r4, r4, #2
 8003538:	2600      	movs	r6, #0
 800353a:	42a6      	cmp	r6, r4
 800353c:	d105      	bne.n	800354a <__libc_init_array+0x2e>
 800353e:	bd70      	pop	{r4, r5, r6, pc}
 8003540:	f855 3b04 	ldr.w	r3, [r5], #4
 8003544:	4798      	blx	r3
 8003546:	3601      	adds	r6, #1
 8003548:	e7ee      	b.n	8003528 <__libc_init_array+0xc>
 800354a:	f855 3b04 	ldr.w	r3, [r5], #4
 800354e:	4798      	blx	r3
 8003550:	3601      	adds	r6, #1
 8003552:	e7f2      	b.n	800353a <__libc_init_array+0x1e>
 8003554:	08003e6c 	.word	0x08003e6c
 8003558:	08003e6c 	.word	0x08003e6c
 800355c:	08003e6c 	.word	0x08003e6c
 8003560:	08003e70 	.word	0x08003e70

08003564 <memset>:
 8003564:	4402      	add	r2, r0
 8003566:	4603      	mov	r3, r0
 8003568:	4293      	cmp	r3, r2
 800356a:	d100      	bne.n	800356e <memset+0xa>
 800356c:	4770      	bx	lr
 800356e:	f803 1b01 	strb.w	r1, [r3], #1
 8003572:	e7f9      	b.n	8003568 <memset+0x4>

08003574 <siprintf>:
 8003574:	b40e      	push	{r1, r2, r3}
 8003576:	b500      	push	{lr}
 8003578:	b09c      	sub	sp, #112	; 0x70
 800357a:	ab1d      	add	r3, sp, #116	; 0x74
 800357c:	9002      	str	r0, [sp, #8]
 800357e:	9006      	str	r0, [sp, #24]
 8003580:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003584:	4809      	ldr	r0, [pc, #36]	; (80035ac <siprintf+0x38>)
 8003586:	9107      	str	r1, [sp, #28]
 8003588:	9104      	str	r1, [sp, #16]
 800358a:	4909      	ldr	r1, [pc, #36]	; (80035b0 <siprintf+0x3c>)
 800358c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003590:	9105      	str	r1, [sp, #20]
 8003592:	6800      	ldr	r0, [r0, #0]
 8003594:	9301      	str	r3, [sp, #4]
 8003596:	a902      	add	r1, sp, #8
 8003598:	f000 f868 	bl	800366c <_svfiprintf_r>
 800359c:	9b02      	ldr	r3, [sp, #8]
 800359e:	2200      	movs	r2, #0
 80035a0:	701a      	strb	r2, [r3, #0]
 80035a2:	b01c      	add	sp, #112	; 0x70
 80035a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80035a8:	b003      	add	sp, #12
 80035aa:	4770      	bx	lr
 80035ac:	2000000c 	.word	0x2000000c
 80035b0:	ffff0208 	.word	0xffff0208

080035b4 <__ssputs_r>:
 80035b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035b8:	688e      	ldr	r6, [r1, #8]
 80035ba:	429e      	cmp	r6, r3
 80035bc:	4682      	mov	sl, r0
 80035be:	460c      	mov	r4, r1
 80035c0:	4690      	mov	r8, r2
 80035c2:	461f      	mov	r7, r3
 80035c4:	d838      	bhi.n	8003638 <__ssputs_r+0x84>
 80035c6:	898a      	ldrh	r2, [r1, #12]
 80035c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80035cc:	d032      	beq.n	8003634 <__ssputs_r+0x80>
 80035ce:	6825      	ldr	r5, [r4, #0]
 80035d0:	6909      	ldr	r1, [r1, #16]
 80035d2:	eba5 0901 	sub.w	r9, r5, r1
 80035d6:	6965      	ldr	r5, [r4, #20]
 80035d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80035dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80035e0:	3301      	adds	r3, #1
 80035e2:	444b      	add	r3, r9
 80035e4:	106d      	asrs	r5, r5, #1
 80035e6:	429d      	cmp	r5, r3
 80035e8:	bf38      	it	cc
 80035ea:	461d      	movcc	r5, r3
 80035ec:	0553      	lsls	r3, r2, #21
 80035ee:	d531      	bpl.n	8003654 <__ssputs_r+0xa0>
 80035f0:	4629      	mov	r1, r5
 80035f2:	f000 fb47 	bl	8003c84 <_malloc_r>
 80035f6:	4606      	mov	r6, r0
 80035f8:	b950      	cbnz	r0, 8003610 <__ssputs_r+0x5c>
 80035fa:	230c      	movs	r3, #12
 80035fc:	f8ca 3000 	str.w	r3, [sl]
 8003600:	89a3      	ldrh	r3, [r4, #12]
 8003602:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003606:	81a3      	strh	r3, [r4, #12]
 8003608:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800360c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003610:	6921      	ldr	r1, [r4, #16]
 8003612:	464a      	mov	r2, r9
 8003614:	f000 fabe 	bl	8003b94 <memcpy>
 8003618:	89a3      	ldrh	r3, [r4, #12]
 800361a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800361e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003622:	81a3      	strh	r3, [r4, #12]
 8003624:	6126      	str	r6, [r4, #16]
 8003626:	6165      	str	r5, [r4, #20]
 8003628:	444e      	add	r6, r9
 800362a:	eba5 0509 	sub.w	r5, r5, r9
 800362e:	6026      	str	r6, [r4, #0]
 8003630:	60a5      	str	r5, [r4, #8]
 8003632:	463e      	mov	r6, r7
 8003634:	42be      	cmp	r6, r7
 8003636:	d900      	bls.n	800363a <__ssputs_r+0x86>
 8003638:	463e      	mov	r6, r7
 800363a:	4632      	mov	r2, r6
 800363c:	6820      	ldr	r0, [r4, #0]
 800363e:	4641      	mov	r1, r8
 8003640:	f000 fab6 	bl	8003bb0 <memmove>
 8003644:	68a3      	ldr	r3, [r4, #8]
 8003646:	6822      	ldr	r2, [r4, #0]
 8003648:	1b9b      	subs	r3, r3, r6
 800364a:	4432      	add	r2, r6
 800364c:	60a3      	str	r3, [r4, #8]
 800364e:	6022      	str	r2, [r4, #0]
 8003650:	2000      	movs	r0, #0
 8003652:	e7db      	b.n	800360c <__ssputs_r+0x58>
 8003654:	462a      	mov	r2, r5
 8003656:	f000 fb6f 	bl	8003d38 <_realloc_r>
 800365a:	4606      	mov	r6, r0
 800365c:	2800      	cmp	r0, #0
 800365e:	d1e1      	bne.n	8003624 <__ssputs_r+0x70>
 8003660:	6921      	ldr	r1, [r4, #16]
 8003662:	4650      	mov	r0, sl
 8003664:	f000 fabe 	bl	8003be4 <_free_r>
 8003668:	e7c7      	b.n	80035fa <__ssputs_r+0x46>
	...

0800366c <_svfiprintf_r>:
 800366c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003670:	4698      	mov	r8, r3
 8003672:	898b      	ldrh	r3, [r1, #12]
 8003674:	061b      	lsls	r3, r3, #24
 8003676:	b09d      	sub	sp, #116	; 0x74
 8003678:	4607      	mov	r7, r0
 800367a:	460d      	mov	r5, r1
 800367c:	4614      	mov	r4, r2
 800367e:	d50e      	bpl.n	800369e <_svfiprintf_r+0x32>
 8003680:	690b      	ldr	r3, [r1, #16]
 8003682:	b963      	cbnz	r3, 800369e <_svfiprintf_r+0x32>
 8003684:	2140      	movs	r1, #64	; 0x40
 8003686:	f000 fafd 	bl	8003c84 <_malloc_r>
 800368a:	6028      	str	r0, [r5, #0]
 800368c:	6128      	str	r0, [r5, #16]
 800368e:	b920      	cbnz	r0, 800369a <_svfiprintf_r+0x2e>
 8003690:	230c      	movs	r3, #12
 8003692:	603b      	str	r3, [r7, #0]
 8003694:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003698:	e0d1      	b.n	800383e <_svfiprintf_r+0x1d2>
 800369a:	2340      	movs	r3, #64	; 0x40
 800369c:	616b      	str	r3, [r5, #20]
 800369e:	2300      	movs	r3, #0
 80036a0:	9309      	str	r3, [sp, #36]	; 0x24
 80036a2:	2320      	movs	r3, #32
 80036a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80036a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80036ac:	2330      	movs	r3, #48	; 0x30
 80036ae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003858 <_svfiprintf_r+0x1ec>
 80036b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80036b6:	f04f 0901 	mov.w	r9, #1
 80036ba:	4623      	mov	r3, r4
 80036bc:	469a      	mov	sl, r3
 80036be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80036c2:	b10a      	cbz	r2, 80036c8 <_svfiprintf_r+0x5c>
 80036c4:	2a25      	cmp	r2, #37	; 0x25
 80036c6:	d1f9      	bne.n	80036bc <_svfiprintf_r+0x50>
 80036c8:	ebba 0b04 	subs.w	fp, sl, r4
 80036cc:	d00b      	beq.n	80036e6 <_svfiprintf_r+0x7a>
 80036ce:	465b      	mov	r3, fp
 80036d0:	4622      	mov	r2, r4
 80036d2:	4629      	mov	r1, r5
 80036d4:	4638      	mov	r0, r7
 80036d6:	f7ff ff6d 	bl	80035b4 <__ssputs_r>
 80036da:	3001      	adds	r0, #1
 80036dc:	f000 80aa 	beq.w	8003834 <_svfiprintf_r+0x1c8>
 80036e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80036e2:	445a      	add	r2, fp
 80036e4:	9209      	str	r2, [sp, #36]	; 0x24
 80036e6:	f89a 3000 	ldrb.w	r3, [sl]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	f000 80a2 	beq.w	8003834 <_svfiprintf_r+0x1c8>
 80036f0:	2300      	movs	r3, #0
 80036f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80036f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80036fa:	f10a 0a01 	add.w	sl, sl, #1
 80036fe:	9304      	str	r3, [sp, #16]
 8003700:	9307      	str	r3, [sp, #28]
 8003702:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003706:	931a      	str	r3, [sp, #104]	; 0x68
 8003708:	4654      	mov	r4, sl
 800370a:	2205      	movs	r2, #5
 800370c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003710:	4851      	ldr	r0, [pc, #324]	; (8003858 <_svfiprintf_r+0x1ec>)
 8003712:	f7fc fd65 	bl	80001e0 <memchr>
 8003716:	9a04      	ldr	r2, [sp, #16]
 8003718:	b9d8      	cbnz	r0, 8003752 <_svfiprintf_r+0xe6>
 800371a:	06d0      	lsls	r0, r2, #27
 800371c:	bf44      	itt	mi
 800371e:	2320      	movmi	r3, #32
 8003720:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003724:	0711      	lsls	r1, r2, #28
 8003726:	bf44      	itt	mi
 8003728:	232b      	movmi	r3, #43	; 0x2b
 800372a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800372e:	f89a 3000 	ldrb.w	r3, [sl]
 8003732:	2b2a      	cmp	r3, #42	; 0x2a
 8003734:	d015      	beq.n	8003762 <_svfiprintf_r+0xf6>
 8003736:	9a07      	ldr	r2, [sp, #28]
 8003738:	4654      	mov	r4, sl
 800373a:	2000      	movs	r0, #0
 800373c:	f04f 0c0a 	mov.w	ip, #10
 8003740:	4621      	mov	r1, r4
 8003742:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003746:	3b30      	subs	r3, #48	; 0x30
 8003748:	2b09      	cmp	r3, #9
 800374a:	d94e      	bls.n	80037ea <_svfiprintf_r+0x17e>
 800374c:	b1b0      	cbz	r0, 800377c <_svfiprintf_r+0x110>
 800374e:	9207      	str	r2, [sp, #28]
 8003750:	e014      	b.n	800377c <_svfiprintf_r+0x110>
 8003752:	eba0 0308 	sub.w	r3, r0, r8
 8003756:	fa09 f303 	lsl.w	r3, r9, r3
 800375a:	4313      	orrs	r3, r2
 800375c:	9304      	str	r3, [sp, #16]
 800375e:	46a2      	mov	sl, r4
 8003760:	e7d2      	b.n	8003708 <_svfiprintf_r+0x9c>
 8003762:	9b03      	ldr	r3, [sp, #12]
 8003764:	1d19      	adds	r1, r3, #4
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	9103      	str	r1, [sp, #12]
 800376a:	2b00      	cmp	r3, #0
 800376c:	bfbb      	ittet	lt
 800376e:	425b      	neglt	r3, r3
 8003770:	f042 0202 	orrlt.w	r2, r2, #2
 8003774:	9307      	strge	r3, [sp, #28]
 8003776:	9307      	strlt	r3, [sp, #28]
 8003778:	bfb8      	it	lt
 800377a:	9204      	strlt	r2, [sp, #16]
 800377c:	7823      	ldrb	r3, [r4, #0]
 800377e:	2b2e      	cmp	r3, #46	; 0x2e
 8003780:	d10c      	bne.n	800379c <_svfiprintf_r+0x130>
 8003782:	7863      	ldrb	r3, [r4, #1]
 8003784:	2b2a      	cmp	r3, #42	; 0x2a
 8003786:	d135      	bne.n	80037f4 <_svfiprintf_r+0x188>
 8003788:	9b03      	ldr	r3, [sp, #12]
 800378a:	1d1a      	adds	r2, r3, #4
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	9203      	str	r2, [sp, #12]
 8003790:	2b00      	cmp	r3, #0
 8003792:	bfb8      	it	lt
 8003794:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003798:	3402      	adds	r4, #2
 800379a:	9305      	str	r3, [sp, #20]
 800379c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003868 <_svfiprintf_r+0x1fc>
 80037a0:	7821      	ldrb	r1, [r4, #0]
 80037a2:	2203      	movs	r2, #3
 80037a4:	4650      	mov	r0, sl
 80037a6:	f7fc fd1b 	bl	80001e0 <memchr>
 80037aa:	b140      	cbz	r0, 80037be <_svfiprintf_r+0x152>
 80037ac:	2340      	movs	r3, #64	; 0x40
 80037ae:	eba0 000a 	sub.w	r0, r0, sl
 80037b2:	fa03 f000 	lsl.w	r0, r3, r0
 80037b6:	9b04      	ldr	r3, [sp, #16]
 80037b8:	4303      	orrs	r3, r0
 80037ba:	3401      	adds	r4, #1
 80037bc:	9304      	str	r3, [sp, #16]
 80037be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037c2:	4826      	ldr	r0, [pc, #152]	; (800385c <_svfiprintf_r+0x1f0>)
 80037c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80037c8:	2206      	movs	r2, #6
 80037ca:	f7fc fd09 	bl	80001e0 <memchr>
 80037ce:	2800      	cmp	r0, #0
 80037d0:	d038      	beq.n	8003844 <_svfiprintf_r+0x1d8>
 80037d2:	4b23      	ldr	r3, [pc, #140]	; (8003860 <_svfiprintf_r+0x1f4>)
 80037d4:	bb1b      	cbnz	r3, 800381e <_svfiprintf_r+0x1b2>
 80037d6:	9b03      	ldr	r3, [sp, #12]
 80037d8:	3307      	adds	r3, #7
 80037da:	f023 0307 	bic.w	r3, r3, #7
 80037de:	3308      	adds	r3, #8
 80037e0:	9303      	str	r3, [sp, #12]
 80037e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037e4:	4433      	add	r3, r6
 80037e6:	9309      	str	r3, [sp, #36]	; 0x24
 80037e8:	e767      	b.n	80036ba <_svfiprintf_r+0x4e>
 80037ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80037ee:	460c      	mov	r4, r1
 80037f0:	2001      	movs	r0, #1
 80037f2:	e7a5      	b.n	8003740 <_svfiprintf_r+0xd4>
 80037f4:	2300      	movs	r3, #0
 80037f6:	3401      	adds	r4, #1
 80037f8:	9305      	str	r3, [sp, #20]
 80037fa:	4619      	mov	r1, r3
 80037fc:	f04f 0c0a 	mov.w	ip, #10
 8003800:	4620      	mov	r0, r4
 8003802:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003806:	3a30      	subs	r2, #48	; 0x30
 8003808:	2a09      	cmp	r2, #9
 800380a:	d903      	bls.n	8003814 <_svfiprintf_r+0x1a8>
 800380c:	2b00      	cmp	r3, #0
 800380e:	d0c5      	beq.n	800379c <_svfiprintf_r+0x130>
 8003810:	9105      	str	r1, [sp, #20]
 8003812:	e7c3      	b.n	800379c <_svfiprintf_r+0x130>
 8003814:	fb0c 2101 	mla	r1, ip, r1, r2
 8003818:	4604      	mov	r4, r0
 800381a:	2301      	movs	r3, #1
 800381c:	e7f0      	b.n	8003800 <_svfiprintf_r+0x194>
 800381e:	ab03      	add	r3, sp, #12
 8003820:	9300      	str	r3, [sp, #0]
 8003822:	462a      	mov	r2, r5
 8003824:	4b0f      	ldr	r3, [pc, #60]	; (8003864 <_svfiprintf_r+0x1f8>)
 8003826:	a904      	add	r1, sp, #16
 8003828:	4638      	mov	r0, r7
 800382a:	f3af 8000 	nop.w
 800382e:	1c42      	adds	r2, r0, #1
 8003830:	4606      	mov	r6, r0
 8003832:	d1d6      	bne.n	80037e2 <_svfiprintf_r+0x176>
 8003834:	89ab      	ldrh	r3, [r5, #12]
 8003836:	065b      	lsls	r3, r3, #25
 8003838:	f53f af2c 	bmi.w	8003694 <_svfiprintf_r+0x28>
 800383c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800383e:	b01d      	add	sp, #116	; 0x74
 8003840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003844:	ab03      	add	r3, sp, #12
 8003846:	9300      	str	r3, [sp, #0]
 8003848:	462a      	mov	r2, r5
 800384a:	4b06      	ldr	r3, [pc, #24]	; (8003864 <_svfiprintf_r+0x1f8>)
 800384c:	a904      	add	r1, sp, #16
 800384e:	4638      	mov	r0, r7
 8003850:	f000 f87a 	bl	8003948 <_printf_i>
 8003854:	e7eb      	b.n	800382e <_svfiprintf_r+0x1c2>
 8003856:	bf00      	nop
 8003858:	08003e30 	.word	0x08003e30
 800385c:	08003e3a 	.word	0x08003e3a
 8003860:	00000000 	.word	0x00000000
 8003864:	080035b5 	.word	0x080035b5
 8003868:	08003e36 	.word	0x08003e36

0800386c <_printf_common>:
 800386c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003870:	4616      	mov	r6, r2
 8003872:	4699      	mov	r9, r3
 8003874:	688a      	ldr	r2, [r1, #8]
 8003876:	690b      	ldr	r3, [r1, #16]
 8003878:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800387c:	4293      	cmp	r3, r2
 800387e:	bfb8      	it	lt
 8003880:	4613      	movlt	r3, r2
 8003882:	6033      	str	r3, [r6, #0]
 8003884:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003888:	4607      	mov	r7, r0
 800388a:	460c      	mov	r4, r1
 800388c:	b10a      	cbz	r2, 8003892 <_printf_common+0x26>
 800388e:	3301      	adds	r3, #1
 8003890:	6033      	str	r3, [r6, #0]
 8003892:	6823      	ldr	r3, [r4, #0]
 8003894:	0699      	lsls	r1, r3, #26
 8003896:	bf42      	ittt	mi
 8003898:	6833      	ldrmi	r3, [r6, #0]
 800389a:	3302      	addmi	r3, #2
 800389c:	6033      	strmi	r3, [r6, #0]
 800389e:	6825      	ldr	r5, [r4, #0]
 80038a0:	f015 0506 	ands.w	r5, r5, #6
 80038a4:	d106      	bne.n	80038b4 <_printf_common+0x48>
 80038a6:	f104 0a19 	add.w	sl, r4, #25
 80038aa:	68e3      	ldr	r3, [r4, #12]
 80038ac:	6832      	ldr	r2, [r6, #0]
 80038ae:	1a9b      	subs	r3, r3, r2
 80038b0:	42ab      	cmp	r3, r5
 80038b2:	dc26      	bgt.n	8003902 <_printf_common+0x96>
 80038b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80038b8:	1e13      	subs	r3, r2, #0
 80038ba:	6822      	ldr	r2, [r4, #0]
 80038bc:	bf18      	it	ne
 80038be:	2301      	movne	r3, #1
 80038c0:	0692      	lsls	r2, r2, #26
 80038c2:	d42b      	bmi.n	800391c <_printf_common+0xb0>
 80038c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80038c8:	4649      	mov	r1, r9
 80038ca:	4638      	mov	r0, r7
 80038cc:	47c0      	blx	r8
 80038ce:	3001      	adds	r0, #1
 80038d0:	d01e      	beq.n	8003910 <_printf_common+0xa4>
 80038d2:	6823      	ldr	r3, [r4, #0]
 80038d4:	68e5      	ldr	r5, [r4, #12]
 80038d6:	6832      	ldr	r2, [r6, #0]
 80038d8:	f003 0306 	and.w	r3, r3, #6
 80038dc:	2b04      	cmp	r3, #4
 80038de:	bf08      	it	eq
 80038e0:	1aad      	subeq	r5, r5, r2
 80038e2:	68a3      	ldr	r3, [r4, #8]
 80038e4:	6922      	ldr	r2, [r4, #16]
 80038e6:	bf0c      	ite	eq
 80038e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038ec:	2500      	movne	r5, #0
 80038ee:	4293      	cmp	r3, r2
 80038f0:	bfc4      	itt	gt
 80038f2:	1a9b      	subgt	r3, r3, r2
 80038f4:	18ed      	addgt	r5, r5, r3
 80038f6:	2600      	movs	r6, #0
 80038f8:	341a      	adds	r4, #26
 80038fa:	42b5      	cmp	r5, r6
 80038fc:	d11a      	bne.n	8003934 <_printf_common+0xc8>
 80038fe:	2000      	movs	r0, #0
 8003900:	e008      	b.n	8003914 <_printf_common+0xa8>
 8003902:	2301      	movs	r3, #1
 8003904:	4652      	mov	r2, sl
 8003906:	4649      	mov	r1, r9
 8003908:	4638      	mov	r0, r7
 800390a:	47c0      	blx	r8
 800390c:	3001      	adds	r0, #1
 800390e:	d103      	bne.n	8003918 <_printf_common+0xac>
 8003910:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003918:	3501      	adds	r5, #1
 800391a:	e7c6      	b.n	80038aa <_printf_common+0x3e>
 800391c:	18e1      	adds	r1, r4, r3
 800391e:	1c5a      	adds	r2, r3, #1
 8003920:	2030      	movs	r0, #48	; 0x30
 8003922:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003926:	4422      	add	r2, r4
 8003928:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800392c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003930:	3302      	adds	r3, #2
 8003932:	e7c7      	b.n	80038c4 <_printf_common+0x58>
 8003934:	2301      	movs	r3, #1
 8003936:	4622      	mov	r2, r4
 8003938:	4649      	mov	r1, r9
 800393a:	4638      	mov	r0, r7
 800393c:	47c0      	blx	r8
 800393e:	3001      	adds	r0, #1
 8003940:	d0e6      	beq.n	8003910 <_printf_common+0xa4>
 8003942:	3601      	adds	r6, #1
 8003944:	e7d9      	b.n	80038fa <_printf_common+0x8e>
	...

08003948 <_printf_i>:
 8003948:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800394c:	460c      	mov	r4, r1
 800394e:	4691      	mov	r9, r2
 8003950:	7e27      	ldrb	r7, [r4, #24]
 8003952:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003954:	2f78      	cmp	r7, #120	; 0x78
 8003956:	4680      	mov	r8, r0
 8003958:	469a      	mov	sl, r3
 800395a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800395e:	d807      	bhi.n	8003970 <_printf_i+0x28>
 8003960:	2f62      	cmp	r7, #98	; 0x62
 8003962:	d80a      	bhi.n	800397a <_printf_i+0x32>
 8003964:	2f00      	cmp	r7, #0
 8003966:	f000 80d8 	beq.w	8003b1a <_printf_i+0x1d2>
 800396a:	2f58      	cmp	r7, #88	; 0x58
 800396c:	f000 80a3 	beq.w	8003ab6 <_printf_i+0x16e>
 8003970:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003974:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003978:	e03a      	b.n	80039f0 <_printf_i+0xa8>
 800397a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800397e:	2b15      	cmp	r3, #21
 8003980:	d8f6      	bhi.n	8003970 <_printf_i+0x28>
 8003982:	a001      	add	r0, pc, #4	; (adr r0, 8003988 <_printf_i+0x40>)
 8003984:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003988:	080039e1 	.word	0x080039e1
 800398c:	080039f5 	.word	0x080039f5
 8003990:	08003971 	.word	0x08003971
 8003994:	08003971 	.word	0x08003971
 8003998:	08003971 	.word	0x08003971
 800399c:	08003971 	.word	0x08003971
 80039a0:	080039f5 	.word	0x080039f5
 80039a4:	08003971 	.word	0x08003971
 80039a8:	08003971 	.word	0x08003971
 80039ac:	08003971 	.word	0x08003971
 80039b0:	08003971 	.word	0x08003971
 80039b4:	08003b01 	.word	0x08003b01
 80039b8:	08003a25 	.word	0x08003a25
 80039bc:	08003ae3 	.word	0x08003ae3
 80039c0:	08003971 	.word	0x08003971
 80039c4:	08003971 	.word	0x08003971
 80039c8:	08003b23 	.word	0x08003b23
 80039cc:	08003971 	.word	0x08003971
 80039d0:	08003a25 	.word	0x08003a25
 80039d4:	08003971 	.word	0x08003971
 80039d8:	08003971 	.word	0x08003971
 80039dc:	08003aeb 	.word	0x08003aeb
 80039e0:	680b      	ldr	r3, [r1, #0]
 80039e2:	1d1a      	adds	r2, r3, #4
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	600a      	str	r2, [r1, #0]
 80039e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80039ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80039f0:	2301      	movs	r3, #1
 80039f2:	e0a3      	b.n	8003b3c <_printf_i+0x1f4>
 80039f4:	6825      	ldr	r5, [r4, #0]
 80039f6:	6808      	ldr	r0, [r1, #0]
 80039f8:	062e      	lsls	r6, r5, #24
 80039fa:	f100 0304 	add.w	r3, r0, #4
 80039fe:	d50a      	bpl.n	8003a16 <_printf_i+0xce>
 8003a00:	6805      	ldr	r5, [r0, #0]
 8003a02:	600b      	str	r3, [r1, #0]
 8003a04:	2d00      	cmp	r5, #0
 8003a06:	da03      	bge.n	8003a10 <_printf_i+0xc8>
 8003a08:	232d      	movs	r3, #45	; 0x2d
 8003a0a:	426d      	negs	r5, r5
 8003a0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a10:	485e      	ldr	r0, [pc, #376]	; (8003b8c <_printf_i+0x244>)
 8003a12:	230a      	movs	r3, #10
 8003a14:	e019      	b.n	8003a4a <_printf_i+0x102>
 8003a16:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003a1a:	6805      	ldr	r5, [r0, #0]
 8003a1c:	600b      	str	r3, [r1, #0]
 8003a1e:	bf18      	it	ne
 8003a20:	b22d      	sxthne	r5, r5
 8003a22:	e7ef      	b.n	8003a04 <_printf_i+0xbc>
 8003a24:	680b      	ldr	r3, [r1, #0]
 8003a26:	6825      	ldr	r5, [r4, #0]
 8003a28:	1d18      	adds	r0, r3, #4
 8003a2a:	6008      	str	r0, [r1, #0]
 8003a2c:	0628      	lsls	r0, r5, #24
 8003a2e:	d501      	bpl.n	8003a34 <_printf_i+0xec>
 8003a30:	681d      	ldr	r5, [r3, #0]
 8003a32:	e002      	b.n	8003a3a <_printf_i+0xf2>
 8003a34:	0669      	lsls	r1, r5, #25
 8003a36:	d5fb      	bpl.n	8003a30 <_printf_i+0xe8>
 8003a38:	881d      	ldrh	r5, [r3, #0]
 8003a3a:	4854      	ldr	r0, [pc, #336]	; (8003b8c <_printf_i+0x244>)
 8003a3c:	2f6f      	cmp	r7, #111	; 0x6f
 8003a3e:	bf0c      	ite	eq
 8003a40:	2308      	moveq	r3, #8
 8003a42:	230a      	movne	r3, #10
 8003a44:	2100      	movs	r1, #0
 8003a46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a4a:	6866      	ldr	r6, [r4, #4]
 8003a4c:	60a6      	str	r6, [r4, #8]
 8003a4e:	2e00      	cmp	r6, #0
 8003a50:	bfa2      	ittt	ge
 8003a52:	6821      	ldrge	r1, [r4, #0]
 8003a54:	f021 0104 	bicge.w	r1, r1, #4
 8003a58:	6021      	strge	r1, [r4, #0]
 8003a5a:	b90d      	cbnz	r5, 8003a60 <_printf_i+0x118>
 8003a5c:	2e00      	cmp	r6, #0
 8003a5e:	d04d      	beq.n	8003afc <_printf_i+0x1b4>
 8003a60:	4616      	mov	r6, r2
 8003a62:	fbb5 f1f3 	udiv	r1, r5, r3
 8003a66:	fb03 5711 	mls	r7, r3, r1, r5
 8003a6a:	5dc7      	ldrb	r7, [r0, r7]
 8003a6c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003a70:	462f      	mov	r7, r5
 8003a72:	42bb      	cmp	r3, r7
 8003a74:	460d      	mov	r5, r1
 8003a76:	d9f4      	bls.n	8003a62 <_printf_i+0x11a>
 8003a78:	2b08      	cmp	r3, #8
 8003a7a:	d10b      	bne.n	8003a94 <_printf_i+0x14c>
 8003a7c:	6823      	ldr	r3, [r4, #0]
 8003a7e:	07df      	lsls	r7, r3, #31
 8003a80:	d508      	bpl.n	8003a94 <_printf_i+0x14c>
 8003a82:	6923      	ldr	r3, [r4, #16]
 8003a84:	6861      	ldr	r1, [r4, #4]
 8003a86:	4299      	cmp	r1, r3
 8003a88:	bfde      	ittt	le
 8003a8a:	2330      	movle	r3, #48	; 0x30
 8003a8c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003a90:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8003a94:	1b92      	subs	r2, r2, r6
 8003a96:	6122      	str	r2, [r4, #16]
 8003a98:	f8cd a000 	str.w	sl, [sp]
 8003a9c:	464b      	mov	r3, r9
 8003a9e:	aa03      	add	r2, sp, #12
 8003aa0:	4621      	mov	r1, r4
 8003aa2:	4640      	mov	r0, r8
 8003aa4:	f7ff fee2 	bl	800386c <_printf_common>
 8003aa8:	3001      	adds	r0, #1
 8003aaa:	d14c      	bne.n	8003b46 <_printf_i+0x1fe>
 8003aac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ab0:	b004      	add	sp, #16
 8003ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ab6:	4835      	ldr	r0, [pc, #212]	; (8003b8c <_printf_i+0x244>)
 8003ab8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003abc:	6823      	ldr	r3, [r4, #0]
 8003abe:	680e      	ldr	r6, [r1, #0]
 8003ac0:	061f      	lsls	r7, r3, #24
 8003ac2:	f856 5b04 	ldr.w	r5, [r6], #4
 8003ac6:	600e      	str	r6, [r1, #0]
 8003ac8:	d514      	bpl.n	8003af4 <_printf_i+0x1ac>
 8003aca:	07d9      	lsls	r1, r3, #31
 8003acc:	bf44      	itt	mi
 8003ace:	f043 0320 	orrmi.w	r3, r3, #32
 8003ad2:	6023      	strmi	r3, [r4, #0]
 8003ad4:	b91d      	cbnz	r5, 8003ade <_printf_i+0x196>
 8003ad6:	6823      	ldr	r3, [r4, #0]
 8003ad8:	f023 0320 	bic.w	r3, r3, #32
 8003adc:	6023      	str	r3, [r4, #0]
 8003ade:	2310      	movs	r3, #16
 8003ae0:	e7b0      	b.n	8003a44 <_printf_i+0xfc>
 8003ae2:	6823      	ldr	r3, [r4, #0]
 8003ae4:	f043 0320 	orr.w	r3, r3, #32
 8003ae8:	6023      	str	r3, [r4, #0]
 8003aea:	2378      	movs	r3, #120	; 0x78
 8003aec:	4828      	ldr	r0, [pc, #160]	; (8003b90 <_printf_i+0x248>)
 8003aee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003af2:	e7e3      	b.n	8003abc <_printf_i+0x174>
 8003af4:	065e      	lsls	r6, r3, #25
 8003af6:	bf48      	it	mi
 8003af8:	b2ad      	uxthmi	r5, r5
 8003afa:	e7e6      	b.n	8003aca <_printf_i+0x182>
 8003afc:	4616      	mov	r6, r2
 8003afe:	e7bb      	b.n	8003a78 <_printf_i+0x130>
 8003b00:	680b      	ldr	r3, [r1, #0]
 8003b02:	6826      	ldr	r6, [r4, #0]
 8003b04:	6960      	ldr	r0, [r4, #20]
 8003b06:	1d1d      	adds	r5, r3, #4
 8003b08:	600d      	str	r5, [r1, #0]
 8003b0a:	0635      	lsls	r5, r6, #24
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	d501      	bpl.n	8003b14 <_printf_i+0x1cc>
 8003b10:	6018      	str	r0, [r3, #0]
 8003b12:	e002      	b.n	8003b1a <_printf_i+0x1d2>
 8003b14:	0671      	lsls	r1, r6, #25
 8003b16:	d5fb      	bpl.n	8003b10 <_printf_i+0x1c8>
 8003b18:	8018      	strh	r0, [r3, #0]
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	6123      	str	r3, [r4, #16]
 8003b1e:	4616      	mov	r6, r2
 8003b20:	e7ba      	b.n	8003a98 <_printf_i+0x150>
 8003b22:	680b      	ldr	r3, [r1, #0]
 8003b24:	1d1a      	adds	r2, r3, #4
 8003b26:	600a      	str	r2, [r1, #0]
 8003b28:	681e      	ldr	r6, [r3, #0]
 8003b2a:	6862      	ldr	r2, [r4, #4]
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	4630      	mov	r0, r6
 8003b30:	f7fc fb56 	bl	80001e0 <memchr>
 8003b34:	b108      	cbz	r0, 8003b3a <_printf_i+0x1f2>
 8003b36:	1b80      	subs	r0, r0, r6
 8003b38:	6060      	str	r0, [r4, #4]
 8003b3a:	6863      	ldr	r3, [r4, #4]
 8003b3c:	6123      	str	r3, [r4, #16]
 8003b3e:	2300      	movs	r3, #0
 8003b40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b44:	e7a8      	b.n	8003a98 <_printf_i+0x150>
 8003b46:	6923      	ldr	r3, [r4, #16]
 8003b48:	4632      	mov	r2, r6
 8003b4a:	4649      	mov	r1, r9
 8003b4c:	4640      	mov	r0, r8
 8003b4e:	47d0      	blx	sl
 8003b50:	3001      	adds	r0, #1
 8003b52:	d0ab      	beq.n	8003aac <_printf_i+0x164>
 8003b54:	6823      	ldr	r3, [r4, #0]
 8003b56:	079b      	lsls	r3, r3, #30
 8003b58:	d413      	bmi.n	8003b82 <_printf_i+0x23a>
 8003b5a:	68e0      	ldr	r0, [r4, #12]
 8003b5c:	9b03      	ldr	r3, [sp, #12]
 8003b5e:	4298      	cmp	r0, r3
 8003b60:	bfb8      	it	lt
 8003b62:	4618      	movlt	r0, r3
 8003b64:	e7a4      	b.n	8003ab0 <_printf_i+0x168>
 8003b66:	2301      	movs	r3, #1
 8003b68:	4632      	mov	r2, r6
 8003b6a:	4649      	mov	r1, r9
 8003b6c:	4640      	mov	r0, r8
 8003b6e:	47d0      	blx	sl
 8003b70:	3001      	adds	r0, #1
 8003b72:	d09b      	beq.n	8003aac <_printf_i+0x164>
 8003b74:	3501      	adds	r5, #1
 8003b76:	68e3      	ldr	r3, [r4, #12]
 8003b78:	9903      	ldr	r1, [sp, #12]
 8003b7a:	1a5b      	subs	r3, r3, r1
 8003b7c:	42ab      	cmp	r3, r5
 8003b7e:	dcf2      	bgt.n	8003b66 <_printf_i+0x21e>
 8003b80:	e7eb      	b.n	8003b5a <_printf_i+0x212>
 8003b82:	2500      	movs	r5, #0
 8003b84:	f104 0619 	add.w	r6, r4, #25
 8003b88:	e7f5      	b.n	8003b76 <_printf_i+0x22e>
 8003b8a:	bf00      	nop
 8003b8c:	08003e41 	.word	0x08003e41
 8003b90:	08003e52 	.word	0x08003e52

08003b94 <memcpy>:
 8003b94:	440a      	add	r2, r1
 8003b96:	4291      	cmp	r1, r2
 8003b98:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003b9c:	d100      	bne.n	8003ba0 <memcpy+0xc>
 8003b9e:	4770      	bx	lr
 8003ba0:	b510      	push	{r4, lr}
 8003ba2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ba6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003baa:	4291      	cmp	r1, r2
 8003bac:	d1f9      	bne.n	8003ba2 <memcpy+0xe>
 8003bae:	bd10      	pop	{r4, pc}

08003bb0 <memmove>:
 8003bb0:	4288      	cmp	r0, r1
 8003bb2:	b510      	push	{r4, lr}
 8003bb4:	eb01 0402 	add.w	r4, r1, r2
 8003bb8:	d902      	bls.n	8003bc0 <memmove+0x10>
 8003bba:	4284      	cmp	r4, r0
 8003bbc:	4623      	mov	r3, r4
 8003bbe:	d807      	bhi.n	8003bd0 <memmove+0x20>
 8003bc0:	1e43      	subs	r3, r0, #1
 8003bc2:	42a1      	cmp	r1, r4
 8003bc4:	d008      	beq.n	8003bd8 <memmove+0x28>
 8003bc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003bca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003bce:	e7f8      	b.n	8003bc2 <memmove+0x12>
 8003bd0:	4402      	add	r2, r0
 8003bd2:	4601      	mov	r1, r0
 8003bd4:	428a      	cmp	r2, r1
 8003bd6:	d100      	bne.n	8003bda <memmove+0x2a>
 8003bd8:	bd10      	pop	{r4, pc}
 8003bda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003bde:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003be2:	e7f7      	b.n	8003bd4 <memmove+0x24>

08003be4 <_free_r>:
 8003be4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003be6:	2900      	cmp	r1, #0
 8003be8:	d048      	beq.n	8003c7c <_free_r+0x98>
 8003bea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bee:	9001      	str	r0, [sp, #4]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f1a1 0404 	sub.w	r4, r1, #4
 8003bf6:	bfb8      	it	lt
 8003bf8:	18e4      	addlt	r4, r4, r3
 8003bfa:	f000 f8d3 	bl	8003da4 <__malloc_lock>
 8003bfe:	4a20      	ldr	r2, [pc, #128]	; (8003c80 <_free_r+0x9c>)
 8003c00:	9801      	ldr	r0, [sp, #4]
 8003c02:	6813      	ldr	r3, [r2, #0]
 8003c04:	4615      	mov	r5, r2
 8003c06:	b933      	cbnz	r3, 8003c16 <_free_r+0x32>
 8003c08:	6063      	str	r3, [r4, #4]
 8003c0a:	6014      	str	r4, [r2, #0]
 8003c0c:	b003      	add	sp, #12
 8003c0e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003c12:	f000 b8cd 	b.w	8003db0 <__malloc_unlock>
 8003c16:	42a3      	cmp	r3, r4
 8003c18:	d90b      	bls.n	8003c32 <_free_r+0x4e>
 8003c1a:	6821      	ldr	r1, [r4, #0]
 8003c1c:	1862      	adds	r2, r4, r1
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	bf04      	itt	eq
 8003c22:	681a      	ldreq	r2, [r3, #0]
 8003c24:	685b      	ldreq	r3, [r3, #4]
 8003c26:	6063      	str	r3, [r4, #4]
 8003c28:	bf04      	itt	eq
 8003c2a:	1852      	addeq	r2, r2, r1
 8003c2c:	6022      	streq	r2, [r4, #0]
 8003c2e:	602c      	str	r4, [r5, #0]
 8003c30:	e7ec      	b.n	8003c0c <_free_r+0x28>
 8003c32:	461a      	mov	r2, r3
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	b10b      	cbz	r3, 8003c3c <_free_r+0x58>
 8003c38:	42a3      	cmp	r3, r4
 8003c3a:	d9fa      	bls.n	8003c32 <_free_r+0x4e>
 8003c3c:	6811      	ldr	r1, [r2, #0]
 8003c3e:	1855      	adds	r5, r2, r1
 8003c40:	42a5      	cmp	r5, r4
 8003c42:	d10b      	bne.n	8003c5c <_free_r+0x78>
 8003c44:	6824      	ldr	r4, [r4, #0]
 8003c46:	4421      	add	r1, r4
 8003c48:	1854      	adds	r4, r2, r1
 8003c4a:	42a3      	cmp	r3, r4
 8003c4c:	6011      	str	r1, [r2, #0]
 8003c4e:	d1dd      	bne.n	8003c0c <_free_r+0x28>
 8003c50:	681c      	ldr	r4, [r3, #0]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	6053      	str	r3, [r2, #4]
 8003c56:	4421      	add	r1, r4
 8003c58:	6011      	str	r1, [r2, #0]
 8003c5a:	e7d7      	b.n	8003c0c <_free_r+0x28>
 8003c5c:	d902      	bls.n	8003c64 <_free_r+0x80>
 8003c5e:	230c      	movs	r3, #12
 8003c60:	6003      	str	r3, [r0, #0]
 8003c62:	e7d3      	b.n	8003c0c <_free_r+0x28>
 8003c64:	6825      	ldr	r5, [r4, #0]
 8003c66:	1961      	adds	r1, r4, r5
 8003c68:	428b      	cmp	r3, r1
 8003c6a:	bf04      	itt	eq
 8003c6c:	6819      	ldreq	r1, [r3, #0]
 8003c6e:	685b      	ldreq	r3, [r3, #4]
 8003c70:	6063      	str	r3, [r4, #4]
 8003c72:	bf04      	itt	eq
 8003c74:	1949      	addeq	r1, r1, r5
 8003c76:	6021      	streq	r1, [r4, #0]
 8003c78:	6054      	str	r4, [r2, #4]
 8003c7a:	e7c7      	b.n	8003c0c <_free_r+0x28>
 8003c7c:	b003      	add	sp, #12
 8003c7e:	bd30      	pop	{r4, r5, pc}
 8003c80:	200000fc 	.word	0x200000fc

08003c84 <_malloc_r>:
 8003c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c86:	1ccd      	adds	r5, r1, #3
 8003c88:	f025 0503 	bic.w	r5, r5, #3
 8003c8c:	3508      	adds	r5, #8
 8003c8e:	2d0c      	cmp	r5, #12
 8003c90:	bf38      	it	cc
 8003c92:	250c      	movcc	r5, #12
 8003c94:	2d00      	cmp	r5, #0
 8003c96:	4606      	mov	r6, r0
 8003c98:	db01      	blt.n	8003c9e <_malloc_r+0x1a>
 8003c9a:	42a9      	cmp	r1, r5
 8003c9c:	d903      	bls.n	8003ca6 <_malloc_r+0x22>
 8003c9e:	230c      	movs	r3, #12
 8003ca0:	6033      	str	r3, [r6, #0]
 8003ca2:	2000      	movs	r0, #0
 8003ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ca6:	f000 f87d 	bl	8003da4 <__malloc_lock>
 8003caa:	4921      	ldr	r1, [pc, #132]	; (8003d30 <_malloc_r+0xac>)
 8003cac:	680a      	ldr	r2, [r1, #0]
 8003cae:	4614      	mov	r4, r2
 8003cb0:	b99c      	cbnz	r4, 8003cda <_malloc_r+0x56>
 8003cb2:	4f20      	ldr	r7, [pc, #128]	; (8003d34 <_malloc_r+0xb0>)
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	b923      	cbnz	r3, 8003cc2 <_malloc_r+0x3e>
 8003cb8:	4621      	mov	r1, r4
 8003cba:	4630      	mov	r0, r6
 8003cbc:	f000 f862 	bl	8003d84 <_sbrk_r>
 8003cc0:	6038      	str	r0, [r7, #0]
 8003cc2:	4629      	mov	r1, r5
 8003cc4:	4630      	mov	r0, r6
 8003cc6:	f000 f85d 	bl	8003d84 <_sbrk_r>
 8003cca:	1c43      	adds	r3, r0, #1
 8003ccc:	d123      	bne.n	8003d16 <_malloc_r+0x92>
 8003cce:	230c      	movs	r3, #12
 8003cd0:	6033      	str	r3, [r6, #0]
 8003cd2:	4630      	mov	r0, r6
 8003cd4:	f000 f86c 	bl	8003db0 <__malloc_unlock>
 8003cd8:	e7e3      	b.n	8003ca2 <_malloc_r+0x1e>
 8003cda:	6823      	ldr	r3, [r4, #0]
 8003cdc:	1b5b      	subs	r3, r3, r5
 8003cde:	d417      	bmi.n	8003d10 <_malloc_r+0x8c>
 8003ce0:	2b0b      	cmp	r3, #11
 8003ce2:	d903      	bls.n	8003cec <_malloc_r+0x68>
 8003ce4:	6023      	str	r3, [r4, #0]
 8003ce6:	441c      	add	r4, r3
 8003ce8:	6025      	str	r5, [r4, #0]
 8003cea:	e004      	b.n	8003cf6 <_malloc_r+0x72>
 8003cec:	6863      	ldr	r3, [r4, #4]
 8003cee:	42a2      	cmp	r2, r4
 8003cf0:	bf0c      	ite	eq
 8003cf2:	600b      	streq	r3, [r1, #0]
 8003cf4:	6053      	strne	r3, [r2, #4]
 8003cf6:	4630      	mov	r0, r6
 8003cf8:	f000 f85a 	bl	8003db0 <__malloc_unlock>
 8003cfc:	f104 000b 	add.w	r0, r4, #11
 8003d00:	1d23      	adds	r3, r4, #4
 8003d02:	f020 0007 	bic.w	r0, r0, #7
 8003d06:	1ac2      	subs	r2, r0, r3
 8003d08:	d0cc      	beq.n	8003ca4 <_malloc_r+0x20>
 8003d0a:	1a1b      	subs	r3, r3, r0
 8003d0c:	50a3      	str	r3, [r4, r2]
 8003d0e:	e7c9      	b.n	8003ca4 <_malloc_r+0x20>
 8003d10:	4622      	mov	r2, r4
 8003d12:	6864      	ldr	r4, [r4, #4]
 8003d14:	e7cc      	b.n	8003cb0 <_malloc_r+0x2c>
 8003d16:	1cc4      	adds	r4, r0, #3
 8003d18:	f024 0403 	bic.w	r4, r4, #3
 8003d1c:	42a0      	cmp	r0, r4
 8003d1e:	d0e3      	beq.n	8003ce8 <_malloc_r+0x64>
 8003d20:	1a21      	subs	r1, r4, r0
 8003d22:	4630      	mov	r0, r6
 8003d24:	f000 f82e 	bl	8003d84 <_sbrk_r>
 8003d28:	3001      	adds	r0, #1
 8003d2a:	d1dd      	bne.n	8003ce8 <_malloc_r+0x64>
 8003d2c:	e7cf      	b.n	8003cce <_malloc_r+0x4a>
 8003d2e:	bf00      	nop
 8003d30:	200000fc 	.word	0x200000fc
 8003d34:	20000100 	.word	0x20000100

08003d38 <_realloc_r>:
 8003d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d3a:	4607      	mov	r7, r0
 8003d3c:	4614      	mov	r4, r2
 8003d3e:	460e      	mov	r6, r1
 8003d40:	b921      	cbnz	r1, 8003d4c <_realloc_r+0x14>
 8003d42:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003d46:	4611      	mov	r1, r2
 8003d48:	f7ff bf9c 	b.w	8003c84 <_malloc_r>
 8003d4c:	b922      	cbnz	r2, 8003d58 <_realloc_r+0x20>
 8003d4e:	f7ff ff49 	bl	8003be4 <_free_r>
 8003d52:	4625      	mov	r5, r4
 8003d54:	4628      	mov	r0, r5
 8003d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d58:	f000 f830 	bl	8003dbc <_malloc_usable_size_r>
 8003d5c:	42a0      	cmp	r0, r4
 8003d5e:	d20f      	bcs.n	8003d80 <_realloc_r+0x48>
 8003d60:	4621      	mov	r1, r4
 8003d62:	4638      	mov	r0, r7
 8003d64:	f7ff ff8e 	bl	8003c84 <_malloc_r>
 8003d68:	4605      	mov	r5, r0
 8003d6a:	2800      	cmp	r0, #0
 8003d6c:	d0f2      	beq.n	8003d54 <_realloc_r+0x1c>
 8003d6e:	4631      	mov	r1, r6
 8003d70:	4622      	mov	r2, r4
 8003d72:	f7ff ff0f 	bl	8003b94 <memcpy>
 8003d76:	4631      	mov	r1, r6
 8003d78:	4638      	mov	r0, r7
 8003d7a:	f7ff ff33 	bl	8003be4 <_free_r>
 8003d7e:	e7e9      	b.n	8003d54 <_realloc_r+0x1c>
 8003d80:	4635      	mov	r5, r6
 8003d82:	e7e7      	b.n	8003d54 <_realloc_r+0x1c>

08003d84 <_sbrk_r>:
 8003d84:	b538      	push	{r3, r4, r5, lr}
 8003d86:	4d06      	ldr	r5, [pc, #24]	; (8003da0 <_sbrk_r+0x1c>)
 8003d88:	2300      	movs	r3, #0
 8003d8a:	4604      	mov	r4, r0
 8003d8c:	4608      	mov	r0, r1
 8003d8e:	602b      	str	r3, [r5, #0]
 8003d90:	f7fd f8fc 	bl	8000f8c <_sbrk>
 8003d94:	1c43      	adds	r3, r0, #1
 8003d96:	d102      	bne.n	8003d9e <_sbrk_r+0x1a>
 8003d98:	682b      	ldr	r3, [r5, #0]
 8003d9a:	b103      	cbz	r3, 8003d9e <_sbrk_r+0x1a>
 8003d9c:	6023      	str	r3, [r4, #0]
 8003d9e:	bd38      	pop	{r3, r4, r5, pc}
 8003da0:	20000204 	.word	0x20000204

08003da4 <__malloc_lock>:
 8003da4:	4801      	ldr	r0, [pc, #4]	; (8003dac <__malloc_lock+0x8>)
 8003da6:	f000 b811 	b.w	8003dcc <__retarget_lock_acquire_recursive>
 8003daa:	bf00      	nop
 8003dac:	2000020c 	.word	0x2000020c

08003db0 <__malloc_unlock>:
 8003db0:	4801      	ldr	r0, [pc, #4]	; (8003db8 <__malloc_unlock+0x8>)
 8003db2:	f000 b80c 	b.w	8003dce <__retarget_lock_release_recursive>
 8003db6:	bf00      	nop
 8003db8:	2000020c 	.word	0x2000020c

08003dbc <_malloc_usable_size_r>:
 8003dbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003dc0:	1f18      	subs	r0, r3, #4
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	bfbc      	itt	lt
 8003dc6:	580b      	ldrlt	r3, [r1, r0]
 8003dc8:	18c0      	addlt	r0, r0, r3
 8003dca:	4770      	bx	lr

08003dcc <__retarget_lock_acquire_recursive>:
 8003dcc:	4770      	bx	lr

08003dce <__retarget_lock_release_recursive>:
 8003dce:	4770      	bx	lr

08003dd0 <_init>:
 8003dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dd2:	bf00      	nop
 8003dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dd6:	bc08      	pop	{r3}
 8003dd8:	469e      	mov	lr, r3
 8003dda:	4770      	bx	lr

08003ddc <_fini>:
 8003ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dde:	bf00      	nop
 8003de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003de2:	bc08      	pop	{r3}
 8003de4:	469e      	mov	lr, r3
 8003de6:	4770      	bx	lr
